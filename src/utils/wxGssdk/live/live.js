"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } var GSSDK = require("./gssdk"), app = getApp(), GS = GSSDK.GS, task = GSSDK.task, tool = GSSDK.tool, Parser = GSSDK.DOMParser, logger = new GSSDK.tool.logger, logMangement = new GSSDK.tool.logMangement, startPlayCurrentTime = 0, JUMPTYPE_LIVE_UNOPEN = "live_unopen", JUMPTYPE_NOT_ENOUGH_AUTHORIZED = "no_enough_authorized", JUMPTYPE_TIP_COULD_OPEN = "could_start_play", JUMPTYPE_TIP_VIDEO_END = "video_ended", JUMPTYPE_TIP_WEBCASRT_PAUSE = "pause", JUMPTYPE_TIP_WEBCASRT_RESUME = "resume", JUMPTYPE_TIP_REPORT_LONGIN = "report_login", isAreadyTip_Ejectdup = !1, isAreadyTip_Unopen = !1, isAreadyTip_Authorized = !1, isAreadyTip_Open = !1, isAreadyTip_Pause = !1, isCouldTip_Resume = !1, isAreadyTip_End = !1, Gensee_VIDEO_Status = null, Gensee_Deal_Function = { PUSH_QA: "onTagAudio", ANSWER_QA: "onQAHighlight", CANCEL_QA: "onCancelHighlight" }, Gensee_SDK_Task_PPT_SDK = "ppt_sdk", Gensee_SDK_Task_ANNOTATION_SDK = "anno_sdk", Gensee_SDK_Task_PPT_MODULE = "ppt_module", toldPlayWebsocketCmd = !1, Gensee_VIDEO_START_CURRENT_TIME = null, Gensee_Host_User_Id = null, Gensee_Asker_User_Id = null, Gensee_Roll_Call = null, Gensee_Roll_Call_Timeout = null, Gensee_Now_Doc_Url_SDK = null, Gensee_Lottery_Start = 1, Gensee_Lottery_End = 2, Gensee_Lottery_Abort = 3, Gensee_STATUS_USER_LIST = null, Gensee_ROLL_CALL_TYPE = null, Gensee_UP_HOST = null, Gensee_VIDEO_STATUS_CMD = null, Gensee_VIDEO_START_INIT = !1, pauseObj = {}, inittimestamp = 0, Gensee_Now_Status_Call = 0, Gensee_Status_Chat = !0, Gensee_Statu_default = { USER_STATUS_DEFAULT: 0, USER_STATUS_HAVE_AUDIO: 1, USER_STATUS_HAVE_VIDEO: 2, USER_STATUS_OPEN_AUDIO: 4, USER_STATUS_OPEN_VIDEO: 8, USER_STATUS_MUTE_AUDIO: 16, USER_STATUS_MUTE_VIDEO: 32, USER_REQUEST_UPGRADE: 64, USER_STATUS_MUTE_CHAT: 128, USER_STATUS_FOCUS: 256, USER_STATUS_ROLLCALL_START: 512, USER_STATUS_ROLLCALL_RESULT: 1024, ROLLCALL_NOT_START: 0, ROLLCALL_STARTING: 1024, ROLLCALL_PRESENT: 512, ROLLCALL_ABSENT: 1536, WEB_AUDIO_INVITE: 2048, WEB_AUDIO_CHATTING: 4096, isFilterQuestion: !1, isWantToUpgrade: !1, isFocus: !0, isActive: NaN, isMute: !1, isAudioInviting: !1, isAudioChatting: !1 }, Gensee_Status_QA = !0, waitnum = 1, ALBurl, ALBBakUrl, timeoutObj, visitUrl = "", cdnEnabled = !1, pollingDealTime = 0, SESSIONID, cdnUrl = "", isOpenBak = !1, chatList = new Array, websocketServer = null, pollingSendTimeExpire = 0, videoEnd = { isWebcastClosed: !1, isVideoEnd: !1, isVideoWaiting: !1 }, wsExceptionFlag = !1, POLLING_INTERVAL_TIME = MAX_POLLING_INTERVAL_TIME, MAX_POLLING_INTERVAL_TIME = 1e4, pollingWebsocketClosed = !1, socketOpen = !1, pollingObject = { sendNum: 0, isWebsocket: !0, startIntervalTime: null, intervalNum: 0 }, lockedPolling = !1, closeKeepLive = !1, resetSession = !1, hasSendPlay = !1, keepliveurl, playingUrl, sendUrl, closedUrl, resetInittimeUrl, keepliveCmd, playingCmd, sendCmd, closedCmd, resetInittimeCmd, isCouldPlaying = !1, unplayMediaUrl, playMediaUrl, lowvideoUrl, annoXmlUrl = "", currentStream = "-1", videoUrl, audioUrl, iosVersion = 0, docPrefix, backcdnUrl = "", nowPlayId = null, audio_is_exit = !1, sessionInvalid = !1, liushow = !1, videoStatus, c_failover = !1, isOpenResult = !1, isSupport = !0, failover = !1, isWebsocket = !1, android = "", connectsvr, topsvr = "", lasttimestamp = -1, isSelect = !1, closeTipNextFunction, VISITALB_INTERVAL_TIME = 1e4, ALBTimeoutResultObj, ALBTimeoutObj, VISITALB_BAK_INTERVAL_TIME = 1e4, c_alb = "", visitALBCount = 0, isVisitALB = !1, visitScheme = "http://", c_confpassword, c_confname, c_confid, c_siteid, c_servicetype, c_userid, c_username, c_userappdata = "", c_idc, c_ipowner, hide, c_mainidc, connectALBSvr, connectBakALBSvr = "", isNeedVisitALB, optimization, c_responsetype = "json", c_ping_failover = !1, c_gcDomain, c_gcPort, c_idcArray, taskObj, gstrue = void 0 != c_userappdata && "" != c_userappdata && null != c_userappdata, stream, channel = null, wxx_ws = "", wxx_api = "", initFlag = !1, CardSurvey = {}, CardAndSurveyResult = {}, submitInterval = 0, tipObj = { authorized: "License 不足", unopen: "直播未开始", open: "已经开始直播请点击！", ended: "直播已经结束！", pause: "直播即将进入暂停状态！", resume: "直播即将重新开始播放！", report: "当前帐号正在登录该直播，请确认后重新登录！" }, pauseOutId, intervalTaskId, pauseFlag = !1, isPlayEnd = !1, isFirstCanPlay = !0, openPolling, wgid = null, expflag = !0, refreshflag = !1, pollingWebsocketClosed = !1, wordsFilterApi = "", idcArray, Gensee_STATUS_USER_LINE = null, Gensee_VER, bindPlayingFlag = !1, closeFun = function () { }, c_subject, count = 0, playAudioUrl, hisAnnoArray = new Array, liveDemandStartStatus = null, playInfo = { videoInfo: null, userInfo: null, logFileInfo: { clientApi: "", diagnoseUploadUrl: "" } }, media = { refresh: function () { tool.checkObjectIsNull(websocketServer) || (websocketServer.close && websocketServer.close(), websocketServer = null), wgid && GS.clearChannel(), pollingObject.startIntervalTime = 0, openPolling = !1, initFlag = !1, hasSendPlay = !1, clearInterval(timeoutObj), tool.checkObjectIsNull(ALBTimeoutResultObj) || clearTimeout(ALBTimeoutResultObj), tool.checkObjectIsNull(ALBTimeoutObj) || clearTimeout(ALBTimeoutObj), pollingDealTime = 0, visitALBCount = 0, isVisitALB = !1, expflag = !1, refreshflag = !0, wsExceptionFlag = !1, c_failover = !1, isAreadyTip_Authorized = !1, Gensee_VIDEO_STATUS_CMD = null, isAreadyTip_Unopen = !1, isAreadyTip_Unopen = !1, isAreadyTip_Open = !1, isAreadyTip_End = !1, isAreadyTip_Ejectdup = !1, isAreadyTip_Pause = !1, Gensee_Statu_default.isFilterQuestion = !1, Gensee_Statu_default.isWantToUpgrade = !1, Gensee_Statu_default.isFocus = !0, Gensee_Statu_default.isMute = !1, Gensee_Statu_default.isAudioInviting = !1, Gensee_Statu_default.isAudioChatting = !1, Gensee_Status_QA = !0, cdnEnabled = !1, isOpenBak = !1, videoEnd = { isWebcastClosed: !1, isVideoEnd: !1, isVideoWaiting: !1 }, pollingWebsocketClosed = !1, socketOpen = !1, pollingObject = { sendNum: 0, isWebsocket: !0, startIntervalTime: null, intervalNum: 0 }, lockedPolling = !1, closeKeepLive = !1, resetSession = !1, isCouldPlaying = !1, audio_is_exit = !1, sessionInvalid = !1, liushow = !1, isOpenResult = !1, isSupport = !0, failover = !1, isWebsocket = !1, isSelect = !1, c_ping_failover = !1, pauseFlag = !1, isPlayEnd = !1, isFirstCanPlay = !0, currentStream = "-1", Gensee_STATUS_USER_LIST = null, Gensee_STATUS_USER_LINE = null, Gensee_Now_Doc_Url_SDK = null, c_idc = "", c_ipowner = "", bindPlayingFlag = !1, closedUrl && media.sendLeaveInfo(), clearInterval(intervalTaskId), task.taskArray = new Array }, init: function (e, t) { channel = app.globalData.channel, openPolling = !0, wgid = channel.id, isVisitALB = !1, expflag = !0, refreshflag = !1; var a = {}; tool.checkObjectIsNull(e.site) && (a.api = "init", a.param = e.site, a.explain = "Parameter site miss", a.type = 2), tool.checkObjectIsNull(e.ownerid) && (a.api = "init", a.param = e.ownerid, a.explain = "Parameter ownerid miss", a.type = 2), tool.checkObjectIsNull(e.authcode) && (a.api = "init", a.param = e.authcode, a.explain = "Parameter authcode miss", a.type = 2), tool.checkObjectIsNull(e.uid) && (e.uid = ""), tool.checkObjectIsNull(e.uname) && (e.uname = ""), tool.checkObjectIsNull(e.encodetype) && (e.encodetype = ""), tool.checkObjectIsNull(e.password) && (e.password = ""), tool.checkObjectIsNull(e.stream) && (e.stream = ""), tool.checkObjectIsNull(e.ownerid) && (e.ownerid = ""), tool.checkObjectIsNull(e.ctx) && (e.ctx = "webcast"), tool.checkObjectIsNull(e.authcode) && (e.authcode = ""), tool.checkObjectIsNull(e.istest) && (e.istest = !1), tool.checkObjectIsNull(e.k) && (e.k = ""); var i; i = e.istest ? "http://" : "https://", "training" === e.ctx ? (i = i + e.site + "/sdk/site/sdk/tra/wxconfig", c_servicetype = 1) : (i = i + e.site + "/sdk/site/sdk/wxconfig", c_servicetype = 0), i = i + "?ownerid=" + e.ownerid + "&authcode=" + e.authcode + "&uid=" + e.uid + "&uname=" + e.uname + "&encodetype=" + e.encodetype + "&password=" + e.password + "&stream=" + e.stream + "&istest=" + e.istest + "&k=" + e.k, logger.log("init url:" + i), wx.request({ url: i, header: { "content-type": "application/json", "cache-control": "no-cache" }, success: function (i) { var n = i.data; if ("success" == n.type) { var s; initFlag = !0, c_confid = e.ownerid, c_userid = n.userId, c_username = n.uname, c_siteid = n.siteid, c_idc = n.idc, c_ipowner = n.ipowner, c_mainidc = n.mainidc, connectALBSvr = n.connectALBSvr, connectBakALBSvr = n.connectBakALBSvr, isNeedVisitALB = n.needVisitALB, optimization = n.optimization, c_gcDomain = n.gcDomain, c_gcPort = n.gcPort, c_idcArray = n.array, idcArray = new Array; for (var l = 0; l < c_idcArray.length; l++)null != c_idcArray[l].pingUrl && "" != c_idcArray[l].pingUrl && idcArray.push({ id: c_idcArray[l].id, code: c_idcArray[l].code, supported: c_idcArray[l].supported, name: c_idcArray[l].name, mainIdc: c_idcArray[l].mainIdc, selected: !1, description: c_idcArray[l].description }); videoStatus = n.videoStatus, c_confname = encodeURIComponent(n.confname), c_subject = n.confname, c_confpassword = n.confpassword, stream = n.stream, submitInterval = n.submitInterval, docPrefix = n.docPrefix, wordsFilterApi = n.wordsFilterApi, e.istest || (wxx_api = n.wxx_api, wxx_ws = n.wxx_ws), n.sslSupport && (connectALBSvr = wxx_api + n.connectALBSvr.split(":")[0], connectBakALBSvr = wxx_api + n.connectBakALBSvr, visitScheme = "https://"), ALBurl = visitScheme + connectALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?", "" != connectBakALBSvr && (ALBBakUrl = visitScheme + connectBakALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?", isOpenBak = !0), optimization && (ALBurl = visitScheme + connectALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?", isOpenBak && (ALBBakUrl = visitScheme + connectBakALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?")), n.clientApi ? playInfo.logFileInfo.clientApi = n.clientApi : playInfo.logFileInfo.clientApi = "", n.diagnoseUploadUrl ? playInfo.logFileInfo.diagnoseUploadUrl = n.diagnoseUploadUrl : playInfo.logFileInfo.diagnoseUploadUrl = "", playInfo.videoInfo = e, playInfo.userInfo = { userid: c_userid, username: c_username, siteid: c_siteid, channel: channel }, t.call(void 0, { userid: c_userid, username: c_username, siteid: c_siteid, channel: channel }); for (var o = ["submitChat", "submitQuestion", "submitVote", "submitChatTo", "submitRollcall", "submitNetChoice", "requireNetSettings", "onPublicChat", "onPriChat", "uploadLogFile", "submitAnswerSheet"], l = 0; l < o.length; l++)GS_proxy.bind(o[l]); taskObj = new task((s = { executedImmediately: n.realTimeHlsEnabled, hTasks: [], pptModuleCount: 0 }, _defineProperty(s, "pptModuleCount", 0), _defineProperty(s, "pptModuleCount", 0), s)), GS_proxy.send("onDataReady", { minInterval: submitInterval }), taskObj.addTaskFunction(Gensee_SDK_Task_PPT_MODULE, function (e) { GS_proxy.send("onDocChange", e) }, null), taskObj.addTaskFunction(Gensee_SDK_Task_ANNOTATION_SDK, function (e) { GS_proxy.send("onAnnotation", e) }, null), taskObj.addTaskFunction("annoFirst", function (e) { GS_proxy.send("onInitAnno", e) }, null), media.visitALB() } else a.api = "init", a.param = n, a.explain = "Background check is not passed:" + JSON.stringify(n) + "-----type:" + n.type + "-----desc:" + n.desc, a.type = 1, tool.checkObjectIsNull(a) || GS_proxy.send("onAPIError", a) }, fail: function (t) { a.api = "init", a.param = "site:" + e.site, a.explain = "fail:" + t.errMsg, a.type = 1, tool.checkObjectIsNull(a) || GS_proxy.send("onAPIError", a) } }) }, getIDCArray: function () { var e = new Array; if (1 != isNeedVisitALB) return e; for (var t = 0; t < idcArray.length; t++)if ("true" != idcArray[t].mainIdc) { var a = {}; a.selected = c_idc == idcArray[t].code, a.label = idcArray[t].description, e.push(a) } return e }, visitALB: function () { tool.checkObjectIsNull(ALBurl) || "https://" != visitScheme || -1 != ALBurl.indexOf("sslsupport = true") || (ALBurl = ALBurl.replace("http://", visitScheme), ALBurl = ALBurl.replace("callback=?", "sslsupport=true") + "&callback=?"), tool.checkObjectIsNull(ALBBakUrl) || "https://" != visitScheme || -1 != ALBBakUrl.indexOf("sslsupport = true") || (ALBBakUrl = ALBBakUrl.replace("http://", visitScheme), ALBBakUrl = ALBBakUrl.replace("callback=?", "sslsupport=true") + "&callback=?"), !tool.checkObjectIsNull(ALBurl) && ALBurl.indexOf("hls=true") < 0 && (ALBurl = ALBurl.replace("callback=?", "hls=true") + "&callback=?"), !tool.checkObjectIsNull(ALBBakUrl) && ALBBakUrl.indexOf("hls=true") < 0 && (ALBBakUrl = ALBBakUrl.replace("callback=?", "hls=true") + "&callback=?"), 1 != isNeedVisitALB ? media.ALBNextFn({ connectsvr: c_gcDomain, topsvr: c_gcDomain + ":" + c_gcPort }) : isVisitALB || (visitALBCount < 3 ? (tool.checkObjectIsNull(ALBurl) ? logger.log("[visitALB]The ALBurl is undefined.") : (logger.log("[visitALB] the url is: " + ALBurl), visitALBCount++ , media.getJSON(ALBurl), c_alb = visitScheme + connectBakALBSvr, ALBTimeoutObj = setTimeout(media.visitALB, VISITALB_BAK_INTERVAL_TIME)), logger.log("ALBTimeoutObj" + ALBTimeoutObj)) : (logger.log("checkObjectIsNull(ALBBakUrl):" + tool.checkObjectIsNull(ALBBakUrl) + ";isOpenBak:" + isOpenBak + ";result:" + (tool.checkObjectIsNull(ALBBakUrl) || !isOpenBak)), tool.checkObjectIsNull(ALBBakUrl) || !isOpenBak ? (logger.log("[ALBBakUrl]The ALBBakUrl is undefined,to  alburl,alburl:" + ALBurl), visitALBCount++ , media.getJSON(ALBurl), visitALBCount = 0, c_alb = visitScheme + connectALBSvr, ALBTimeoutObj = setTimeout(media.visitALB, VISITALB_BAK_INTERVAL_TIME)) : (logger.log("[ALBBakUrl] the ALBBakUrl is: " + ALBBakUrl), visitALBCount++ , media.getJSON(ALBBakUrl), visitALBCount = 0, c_alb = visitScheme + connectBakALBSvr, ALBTimeoutObj = setTimeout(media.visitALB, VISITALB_BAK_INTERVAL_TIME)))) }, pingresult: function (e) { if (logger.log("pingresultpingresult:" + e), tool.checkObjectIsNull(ALBTimeoutObj) || clearTimeout(ALBTimeoutObj), tool.checkObjectIsNull(ALBTimeoutResultObj) || (logger.log("[pingresult]The ALBTimeoutResultObj:" + ALBTimeoutResultObj), clearTimeout(ALBTimeoutResultObj)), isVisitALB) return void logger.log("[pingresult]Visit ALB already back is success."); visitALBCount-- , logger.log("[pingresult]Visit ALB success."); var t = {}; tool.checkObjectIsNull(e) ? t.result = "-1" : (t = e, logger.log(t.connectsvr)), "-1" == t.result ? logger.log("[pingresult]Return the results no data") : "2" == t.result || "4" == t.result ? (logger.log("[pingresult]LAB connection failure, the reason is " + t.result), ALBTimeoutResultObj = setTimeout(media.visitALB, VISITALB_INTERVAL_TIME), logger.log("[pingresult]LAB connection failure, the reason is " + t.result), ALBTimeoutResultObj = setTimeout(media.visitALB, VISITALB_INTERVAL_TIME)) : "5" == t.result ? (logger.log("[pingresult]LAB connection failure, the reason is " + t.result), media.jumpTipInfo(JUMPTYPE_NOT_ENOUGH_AUTHORIZED), closeTipNextFunction = function () { }) : "3" == t.result || "6" == t.result ? (logger.log("[pingresult]LAB connection failure, the reason is " + t.result), isAreadyTip_Unopen ? ALBTimeoutResultObj = setTimeout(media.visitALB, VISITALB_INTERVAL_TIME) : (media.jumpTipInfo(JUMPTYPE_LIVE_UNOPEN), closeTipNextFunction = function () { }, ALBTimeoutResultObj = setTimeout(media.visitALB, VISITALB_INTERVAL_TIME))) : "0" == t.result && (isVisitALB = !0, c_idc = t.idcid, isSelect = !0, c_ipowner = t.ipowner, media.ALBNextFn(t)) }, iosVersion: function (e) { var t = e.split(" "), a = 0; if (t && t.length > 1) { var i = t[1], n = i.indexOf("."); n > 0 && (a = i.substr(0, n), a = isNaN(a) ? 0 : Number(a)) } return a }, ALBNextFn: function (e) { lasttimestamp = -1, tool.checkObjectIsNull(e.topsvr) || (topsvr = e.topsvr), connectsvr = wxx_api + e.connectsvr; var t = ""; wx.getSystemInfo({ success: function (e) { t = e.model, t.toLowerCase().indexOf("iphone") >= 0 ? (iosVersion = media.iosVersion(e.system), android = !1, t = 24) : (android = !0, t = 23) } }); var a = visitScheme + connectsvr + "/httpstreamcmd/open/" + c_confid + "?servicetype=" + c_servicetype + "&topsvr=" + topsvr + "&userid=" + c_userid + "&siteid=" + c_siteid + "&username=" + encodeURIComponent(c_username) + "&failover=" + failover + "&jointype=" + t, i = "open/" + c_confid + "?servicetype=" + c_servicetype + "&topsvr=" + topsvr + "&userid=" + c_userid + "&siteid=" + c_siteid + "&username=" + encodeURIComponent(c_username) + "&failover=" + c_failover + "&jointype=" + t; if (e.forcehttp && "" == wxx_api && (cdnUrl = e.cdn1, backcdnUrl = e.cdn2, (void 0 != cdnUrl && "" != tool.trim(cdnUrl) || void 0 != backcdnUrl && "" != tool.trim(backcdnUrl)) && (i += "&cdn=true", a += "&cdn=true", cdnEnabled = !0)), i += "&callback=?", a += "&callback=?", wsExceptionFlag) media.visitWebUrl(a); else try { var n = {}; n.path = "gensee_websocket", tool.checkObjectIsNull(websocketServer) || websocketServer.close && websocketServer.close(), "https://" == visitScheme ? (n.connect = "wss://" + connectsvr, n.port = "443") : (n.connect = "ws://" + connectsvr, n.port = "80"), "" != wxx_ws && wxx_ws != wxx_api && (n.connect = n.connect.replace(wxx_api, wxx_ws)), websocketServer = wx.connectSocket({ url: n.connect + ":" + n.port + "/gensee_websocket" }), websocketServer.onOpen(function () { socketOpen = !0, logger.log("WebSocket连接已打开！"), isWebsocket = !0, clearTimeout(ALBTimeoutObj), clearTimeout(ALBTimeoutResultObj), clearInterval(timeoutObj), setTimeout(function () { isOpenResult || (logger.log("[websocket]:websock is not accept message"), isSupport = !1, tool.checkObjectIsNull(websocketServer) || websocketServer.close && websocketServer.close()) }, 1e4), websocketServer.send({ data: i, success: function () { return logger.log("success"), !0 }, fail: function () { logger.log("fail") } }) }), websocketServer.onMessage(function (e) { logger.log("收到服务器信息：" + e.data); try { media.evalstr(e.data) } catch (e) { logger.log("deal data is exception," + e) } }), closeFun = function () { clearInterval(timeoutObj), pollingDealTime = 0, isWebsocket = !1, socketOpen = !1, media.expire() }, websocketServer.onClose(function (e) { logger.log("WebSocket 已关闭！:" + JSON.stringify(e)), websocketServer = null, closeFun() }), websocketServer.onError(function (e) { logger.log("WebSocket连接打开失败，请检查！：" + JSON.stringify(e)), wsExceptionFlag = !0 }) } catch (e) { logger.log(e), media.visitWebUrl(a) } }, visitWebUrl: function (e) { tool.checkObjectIsNull(e) ? logger.log("[visitWebUrl] the url is undefined.") : (logger.log("[visitWebUrl] the url is: " + e), media.getJSON(e)) }, joinresult: function (e) { isOpenResult = !0, logger.log("[joinresult]the callback is success."), tool.checkObjectIsNull(e) ? logger.log("[joinresult] the data is undefined.") : "0" == e.result ? (c_ping_failover = "true", c_failover = "true", logger.log("6执行joinresult " + JSON.stringify(e)), "2" == videoStatus ? (logger.log("61执行joinresult " + JSON.stringify(e)), media.timeoutDeal(e)) : setTimeout(function () { media.timeoutDeal(e) }, 1e4)) : "1" == e.result ? (websocketServer.onError(function (e) { clearInterval(timeoutObj) }), logger.log("[[joinresult connection alb]]Join in webcast is fail,the reason is " + e.result + ";to connection alb."), media.jumpTipInfo(JUMPTYPE_NOT_ENOUGH_AUTHORIZED)) : "2" == e.result ? (logger.log("[[joinresult connection alb]]Join in webcast is fail,the reason is " + e.result + ";to connection alb."), media.jumpTipInfo(JUMPTYPE_TIP_REPORT_LONGIN)) : "3" == e.result ? (logger.log("subserver alb no connect" + e.result), media.jumpTipInfo("lock_ip")) : "4" == e.result ? (logger.log("subserver alb no connect" + e.result), media.expire()) : (logger.log("[joinresult]Join in webcast is fail,the reason is " + e.result), media.jumpTipInfo(JUMPTYPE_TIP_NOT_ENOUGH)) }, timeoutDeal: function (e) { if (c_failover) try { GS_proxy.send("onAnnoClear", {}) } catch (e) { logger.log(e.message) } logger.log("7执行timeoutDeal " + JSON.stringify(e)), logger.log("[joinresult]Join in webcast is success:" + JSON.stringify(e)), SESSIONID = e.sessionid, tool.checkObjectIsNull(e.lowvideourl) || "" == e.lowvideourl || (liushow = !0), media.urlCdnDetail(e.streamurl, e.audioonlyurl, e.lowvideourl), sessionInvalid ? (logger.log("[joinresult]the sessionInvalid is true"), sessionInvalid = !1, tool.checkObjectIsNull(e.audioonlyurl) || (audio_is_exit = !0), media.videoFn(videoUrl, lowvideoUrl, audioUrl), media.audioFn(videoUrl, lowvideoUrl, audioUrl)) : (media.audioFn(videoUrl, lowvideoUrl, audioUrl), media.videoFn(videoUrl, lowvideoUrl, audioUrl)), media.joinwebcastNextFn(e) }, videoFn: function (e, t, a) { if (logger.log("5执行videoFn " + e), "-1" == currentStream) { currentStream = stream; var i = {}; i.target = "", i.option = "multistream", i.enable = liushow, GS_proxy.send("onSetting", i) } playMediaUrl = "0" == currentStream && liushow ? lowvideoUrl : videoUrl, unplayMediaUrl = audioUrl, logger.log("[videoFn] The play url :" + playMediaUrl + ";videoUrl=" + videoUrl + ";lowvideoUrl=" + lowvideoUrl + ";audioUrl=" + audioUrl), cdnEnabled && media.urlChangeDetail() && (playMediaUrl = "0" == currentStream && liushow ? lowvideoUrl : videoUrl, unplayMediaUrl = audioUrl, logger.log("cdn change:" + playMediaUrl)), GS_proxy.send("onVideoUrl", playMediaUrl), isCouldPlaying = !0, media.jumpTipInfo(JUMPTYPE_TIP_COULD_OPEN), closeTipNextFunction = function () { } }, audioFn: function (e, t, a) { playAudioUrl = audioUrl, unplayMediaUrl = e, logger.log("[audioFn] The audio url :" + audioUrl + ";playAudioUrl=" + playAudioUrl + ";audio=" + unplayMediaUrl), cdnEnabled && media.urlChangeDetail() && (playAudioUrl = audioUrl, unplayMediaUrl = videoUrl, logger.log("cdn change:" + playAudioUrl)), GS_proxy.send("onAudioUrl", playAudioUrl), isCouldPlaying = !0, media.jumpTipInfo(JUMPTYPE_TIP_COULD_OPEN), closeTipNextFunction = function () { } }, urlChangeDetail: function () { logger.log("url change before:" + videoUrl + lowvideoUrl + audioUrl); var e = !0; if (void 0 != cdnUrl && "" != tool.trim(cdnUrl) && cdnUrl.indexOf(".m3u8") < 0 && videoUrl.indexOf(cdnUrl.replace("https://", "").replace("http://", "") + "/") >= 0 && void 0 != backcdnUrl && "" != tool.trim(backcdnUrl)) { var t = cdnUrl.replace("https://", "").replace("http://", ""), a = backcdnUrl.replace("https://", "").replace("http://", ""); videoUrl = videoUrl.replace(t + "/", a + "/"), void 0 != lowvideoUrl && "" != tool.trim(lowvideoUrl) && (lowvideoUrl = lowvideoUrl.replace(t + "/", a + "/")), audioUrl = audioUrl.replace(t + "/", a + "/"), visitUrl = visitUrl.replace(t + "/", a + "/") } else e = !1; return e && logger.log("url change after:" + videoUrl + lowvideoUrl + audioUrl), e }, urlFileName: function (e) { if (tool.checkObjectIsNull(e) || "" == tool.trim(e)) return ""; var t = e.lastIndexOf("/"); return t > -1 ? e.substring(t + 1) : e }, urlCdnDetail: function (e, t, a) { var i, n; tool.checkObjectIsNull(topsvr) || (i = topsvr.split(":")), tool.checkObjectIsNull(i) || (n = i[0]); var s = media.urlFileName(e), l = media.urlFileName(t), o = media.urlFileName(a); cdnEnabled ? void 0 != cdnUrl && "" != tool.trim(cdnUrl) ? cdnUrl.indexOf(".m3u8") > 0 ? (visitUrl = "https://" == visitScheme ? "https://" : "http://", visitUrl += connectsvr + "/httpstream/" + c_confid + "/", annoXmlUrl = visitUrl + "anno.xml?t=" + (new Date).getTime(), s = urlFileName(cdnUrl), videoUrl = cdnUrl.indexOf("http://") < 0 && cdnUrl.indexOf("https://") < 0 ? visitScheme + cdnUrl : 0 == cdnUrl.indexOf("http://") && "http://" != visitScheme ? cdnUrl.replace("http://", visitScheme) : 0 == cdnUrl.indexOf("https://") && "https://" != visitScheme ? cdnUrl.replace("https://", visitScheme) : cdnUrl, audioUrl = videoUrl.replace(s, l), "" != o && (lowvideoUrl = videoUrl.replace(s, o))) : (visitUrl = cdnUrl.indexOf("http://") < 0 && cdnUrl.indexOf("https://") < 0 ? visitScheme + cdnUrl : 0 == cdnUrl.indexOf("http://") && "http://" != visitScheme ? cdnUrl.replace("http://", visitScheme) : 0 == cdnUrl.indexOf("https://") && "https://" != visitScheme ? cdnUrl.replace("https://", visitScheme) : cdnUrl, visitUrl += "/" + n + "/httpstream/" + c_confid + "/", videoUrl = visitUrl + s, audioUrl = visitUrl + l, "" != o && (lowvideoUrl = visitUrl + o), annoXmlUrl = visitUrl + "anno.xml") : void 0 != backcdnUrl && "" != backcdnUrl.trim() && (visitUrl = backcdnUrl.indexOf("http://") < 0 && backcdnUrl.indexOf("https://") < 0 ? visitScheme + cdnUrl : 0 == backcdnUrl.indexOf("http://") && "http://" != visitScheme ? backcdnUrl.replace("http://", visitScheme) : 0 == backcdnUrl.indexOf("https://") && "https://" != visitScheme ? backcdnUrl.replace("https://", visitScheme) : backcdnUrl, visitUrl += "/" + n + "/httpstream/" + c_confid + "/", videoUrl = visitUrl + s, audioUrl = visitUrl + l, "" != o && (lowvideoUrl = visitUrl + o), annoXmlUrl = visitUrl + "anno.xml") : (visitUrl = "https://" == visitScheme ? "https://" : "http://", visitUrl += connectsvr + "/httpstream/" + c_confid + "/", videoUrl = visitUrl + s + "?sessionid=" + SESSIONID + "&t=" + (new Date).getTime(), audioUrl = visitUrl + l + "?sessionid=" + SESSIONID + "&t=" + (new Date).getTime(), "" != o && (lowvideoUrl = visitUrl + o + "?sessionid=" + SESSIONID + "&t=" + (new Date).getTime()), annoXmlUrl = visitUrl + "anno.xml?t=" + (new Date).getTime(), iosVersion >= 11 && void 0 != docPrefix && "" != tool.trim(docPrefix) && (visitUrl = visitScheme + docPrefix.replace("http://", "").replace("https://", "") + "/" + n + "/httpstream/" + c_confid + "/")) }, onSocketMessage: function (e) { logger.log("[websocket send]message:" + e); var t = !1; return tool.checkObjectIsNull(websocketServer) || websocketServer.readyState == socketOpen && (logger.log("type=websocket:[send The message]" + e), websocketServer.send({ data: e }), t = !0), logger.log("[websocket send]result:" + t), t }, joinwebcastNextFn: function (e) { GS_proxy.send("onStart", {}), GS_proxy.send("onTitle", { content: c_subject }), logger.log("[joinwebcastNextFn]The video is already start play."), keepliveurl = visitScheme + connectsvr + "/httpstreamcmd/keepalive/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random(), playingUrl = visitScheme + connectsvr + "/httpstreamcmd/play/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", sendUrl = visitScheme + connectsvr + "/httpstreamcmd/send/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random(), closedUrl = visitScheme + connectsvr + "/httpstreamcmd/close/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", resetInittimeUrl = visitScheme + connectsvr + "/httpstreamcmd/resetinittime/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", keepliveCmd = "keepalive/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random(), playingCmd = "play/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", sendCmd = "send/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random(), closedCmd = "close/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", resetInittimeCmd = "resetinittime/" + c_confid + "?sessionid=" + e.sessionid + "&t=" + Math.random() + "&callback=?", closeKeepLive = !1, media.toldPlay(), resetSession && (hasSendPlay = !1, media.toldPlay(), resetSession = !1), media.polling(keepliveurl, !0), media.getAnnoHis() }, polling: function (e, t) { setTimeout(function () { closeKeepLive ? logger.log("[polling]The closeKeepLive is true.") : (logger.log("[polling IntervalTime]:" + (new Date).getTime() + ";" + pollingObject.intervalNum), pollingObject.intervalNum++ , media.sendKeepLive(e, t)) }, 0) }, getAnnoHis: function () { annoXmlUrl.length > 0 && media.getXmlData(annoXmlUrl) }, getXmlData: function (e) { wx.request({ url: e, dateType: "xml", success: function (e) { logger.log("[getXmlData] Ajax is success."); var t = analysis.parseXml(e.data); logger.log("[getXmlData] The xml analytical result:" + t), analysis.analysisHisAnno(t) }, error: function () { logger.log("[getXmlData]The xmlUrl:" + e + " is error.") } }) }, getJsonP: function (e) { logger.log("getJsonP url:" + e), wx.request({ type: "get", async: !0, url: e, dataType: "json", timeout: 15e3, success: function (e) { if (logger.log("getjsonp data success:" + JSON.stringify(e)), tool.checkObjectIsNull(e.data) || "" == e.data) media.sendKeepLive(pollingObject.url, pollingObject.isPolling); else if (e.data.indexOf("expire") > -1) t = e.data.replace("expire(", "").replace(")", "").trim(), logger.log("getJaonP:" + t), media.expire(); else if (e.data.indexOf("metadata") > -1) { var t = e.data; t = t.replace("metadata(", "").replace(")", "").trim(), media.metadata(t) } }, fail: function (e) { logger.log("getjsonp fail:" + JSON.stringify(e)), media.sendKeepLive(pollingObject.url, pollingObject.isPolling), pollingDealTime += 1 } }) }, sendKeepLive: function (e, t) { lockedPolling = !0; var a = e, i = app.globalData.currentTime - startPlayCurrentTime; if (pollingObject.startIntervalTime = (new Date).getTime(), e = e.indexOf("?") > 0 ? e + "&lasttimestamp=" + lasttimestamp + "&playtime=" + i + "&waitnum=1&sign=" + pollingObject.startIntervalTime + "&callback=?" : e + "?lasttimestamp=" + lasttimestamp + "&playtime=" + i + "&waitnum=1&sign=" + pollingObject.startIntervalTime + "&callback=?", logger.log("[polling]the currentTime:" + i + ";waitnum:" + waitnum), tool.checkObjectIsNull(e)) logger.log("[polling]The url is undefined."); else { logger.log("The send websocket" + (!tool.checkObjectIsNull(websocketServer) && socketOpen)), !tool.checkObjectIsNull(websocketServer) && socketOpen ? (pollingWebsocketClosed || (closeFun = function () { closeKeepLive = !1, media.sendKeepLive(a, t) }, pollingWebsocketClosed = !0), media.onSocketMessage(keepliveCmd) ? (closeKeepLive = !0, pollingObject.isWebsocket = !0, pollingDealTime = 0, logger.log("send websocket cmd")) : (logger.log("[polling]The url is :" + e + ",the interval time:" + POLLING_INTERVAL_TIME), pollingObject.sendNum = pollingObject.sendNum + 1, logger.log("[pollingObject.sendNum]" + pollingObject.sendNum), pollingObject.isWebsocket = !1, logger.log("[send time]" + (new Date).getTime()), media.getJsonP(e))) : isWebsocket && !socketOpen ? (pollingObject.isWebsocket = !1, wsExceptionFlag = !0, media.expire()) : (pollingObject.sendNum = pollingObject.sendNum + 1, logger.log("[pollingObject.sendNum]" + pollingObject.sendNum), pollingObject.isWebsocket = !1, logger.log("[send time]" + (new Date).getTime()), media.getJsonP(e)); var n = !1; 0 == pollingDealTime ? pollingDealTime = (new Date).getTime() : pollingDealTime > 10 && (n = !0), n && (logger.log("[polling] the gsonp is not result"), clearInterval(timeoutObj), pollingDealTime = 0, media.expire()) } pollingObject.url = a, pollingObject.isPolling = t, lockedPolling = !1 }, expire: function () { expflag && (videoEnd.isWebcastClosed || isAreadyTip_Ejectdup || isAreadyTip_End || (clearInterval(timeoutObj), ALBurl = "http://" == visitScheme ? "http://" + connectALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?" : "https://" + connectALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&sslsupport=true&callback=?", ALBurl.indexOf("hls=true") < 0 && (ALBurl = ALBurl.replace("callback=?", "hls=true") + "&callback=?"), isOpenBak && (ALBBakUrl = "http://" == visitScheme ? "http://" + connectBakALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?" : "https://" + connectBakALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + c_idc + "&ipowner=" + c_ipowner + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&sslsupport=true&callback=?", ALBBakUrl.indexOf("hls=true") < 0 && (ALBBakUrl = ALBBakUrl.replace("callback=?", "hls=true") + "&callback=?")), !tool.checkObjectIsNull(websocketServer) && socketOpen ? (logger.log("[websocket expire]"), closeFun = function () { logger.log("[expire]The closed webserver."), closeKeepLive = !0, resetSession = !0, wsExceptionFlag = !1, waitnum = 0, sessionInvalid = !0, openPolling = !1, tool.checkObjectIsNull(isVisitALB) || tool.checkObjectIsNull(visitALBCount) || (isVisitALB = !1, visitALBCount--), media.visitALB() }, socketOpen && (tool.checkObjectIsNull(websocketServer) || websocketServer.close && (websocketServer.close(), websocketServer = null))) : (closeKeepLive = !0, logger.log("[expire]The closeKeepLive is seted true."), resetSession = !0, waitnum = 0, sessionInvalid = !0, pollingSendTimeExpire = (new Date).getTime(), logger.log("[expire]pollingSendTimeExpire:" + pollingSendTimeExpire), tool.checkObjectIsNull(isVisitALB) || tool.checkObjectIsNull(visitALBCount) || (isVisitALB = !1, visitALBCount--), taskObj.executeAllTask(), media.visitALB()))) }, dealChat: function () { if (gstrue && chatList.length > 0) { for (var e = (new Date).getTime(), t = new Array, a = 0; a < chatList.length; a++) { var i = chatList[a].timestamp; if (!(chatList[a].hasInfo || e - i > 15e3)) break; for (var n = chatList[a].chats, s = 0; s < n.length; s++) { var l = n[s]; l.inittimestamp = inittimestamp, void 0 == l.userdata && void 0 != userdatas[l.senderUid] && (l.userdata = userdatas[l.senderUid]), t.push(l), chatList.splice(0, 1) } a-- } t.length > 0 && media.emsDealFunction(t) } }, metadata: function (e) { var e = JSON.parse(e); if (!pollingObject.isWebsocket && !tool.checkObjectIsNull(e.sign) && e.sign - pollingSendTimeExpire <= 0) return void logger.log("[metadata] the this polling,before expire.resultObj.sign:" + e.sign + ";pollingSendTimeExpire:" + pollingSendTimeExpire); if (gstrue && media.dealChat(), logger.log("[start deal time]resultObj.sign：" + e.sign + ";pollingSendTimeExpire:" + pollingSendTimeExpire), logger.log("[start deal time]" + (new Date).getTime()), logger.log("[metadata]The metadata is executed,content:" + e), logger.log("[pollingObject.sendNum]" + pollingObject.sendNum), pollingObject.isWebsocket || (pollingObject.sendNum = pollingObject.sendNum - 1, logger.log("[clear polling]"), logger.log("[timeoutnum_add]" + new Date + ";" + pollingObject.sendNum)), pollingDealTime = 0, tool.checkObjectIsNull(e)) logger.log("[metadata]The resultObj is undefined."); else { void 0 != e.lasttimestamp && (lasttimestamp = e.lasttimestamp); e.timestamp; if (tool.checkObjectIsNull(e.inittimestamp) || (inittimestamp = e.inittimestamp), logger.log("[sendKeepLive liveDemandStartParamFn]" + e.vod), "" == e.vod || tool.checkObjectIsNull(e.vod) || liveDemandStartStatus == e.vod || (GS_proxy.send("onLiveDemandStart", { show: e.vod }), liveDemandStartStatus = e.vod), !tool.checkObjectIsNull(e.data)) for (var t = 0; t < e.data.length; t++) { var a = e.data[t]; try { media.distributionFn(a) } catch (e) { logger.log("错误信息：" + e) } } } logger.log("[pollingObject.sendNum]:" + pollingObject.sendNum + "[pollingObject.intervalNum]" + pollingObject.intervalNum), logger.log("[end deal time]" + (new Date).getTime() + ";" + !pollingObject.isWebsocket), !pollingObject.isWebsocket && openPolling && (logger.log("[sendKeepLive]pollingObject.startIntervalTime:" + pollingObject.startIntervalTime + ";resultObj.sign:" + e.sign), pollingObject.startIntervalTime - 0 == e.sign - 0 && media.sendKeepLive(pollingObject.url, pollingObject.isPolling)) }, distributionFn: function (e) { if (logger.log("[distributionFn]The type is :" + e.type), logger.log("[data inittimestamp]" + inittimestamp), "document" == e.type) { var t = analysis.analysisPpt(e.content); t.inittimestamp = inittimestamp, taskDeal.pptDealFunction(t) } else if ("annotation" == e.type) { var t = analysis.analysisAnno(e.content); t.inittimestamp = inittimestamp, taskDeal.annoDealFunction(t) } else if ("qa" == e.type) { var a = analysis.analysisQaType(e.content); if ("qa" == a) { var t = analysis.analysisQa(e.content); t.inittimestamp = inittimestamp, media.qaDealFunction(t) } else if ("qahistroy" == a) { var t = analysis.analysisQaList(e.content); media.qaListDealFunction(t) } } else if ("vote" == e.type) { var i = analysis.analysisVote(e.content); if (i.inittimestamp = inittimestamp, "card" == i.type) { for (var n = 0; n < i.contentArray.length; n++) { var s = i.contentArray[n]; GS_proxy.send("onAnswerSheet", s) } for (var n = 0; n < i.resultArray.length; n++) { var s = i.resultArray[n]; GS_proxy.send("onAnswerSheetAnswer", s) } } else { for (var n = 0; n < i.contentArray.length; n++) { var s = i.contentArray[n]; tool.checkObjectIsNull(s.timestamp) || s.timestamp - 0 < i.inittimestamp - 0 || s.timestamp - i.inittimestamp, GS_proxy.send("onVote", s) } for (var n = 0; n < i.resultArray.length; n++) { var s = i.resultArray[n]; tool.checkObjectIsNull(s.timestamp) || s.timestamp - 0 < i.inittimestamp - 0 || s.timestamp - i.inittimestamp, s.skip = void 0, GS_proxy.send("onVoteResult", s) } } } else if ("survery" == e.type) { var t = analysis.analysisSurvey(e.content); t.inittimestamp = inittimestamp, GS_proxy.send("onSurvey", t) } else if ("ems" == e.type) { var t = analysis.analysisEms(e.content); t.inittimestamp = inittimestamp, media.emsDealFunction(t) } else if ("lottery" == e.type) { var t = media.lottery(e.content); t.inittimestamp = inittimestamp, media.lotteryDealFunction(t) } else if ("videoparam" == e.type) { var t = analysis.analysisVideoParam(e.content); t.inittimestamp = inittimestamp, GS_proxy.send("onVideoConfig", t) } else if ("usernum" == e.type) { var l = analysis.analysisUsernum(e.content), t = {}; t.inittimestamp = inittimestamp; for (var n = 0; n < l.length; n++) { var o = l[n]; o.num - 0 > 0 ? (GS_proxy.send("onUserOnline", { count: o.num }), null != Gensee_STATUS_USER_LINE && Gensee_STATUS_USER_LINE || (Gensee_STATUS_USER_LINE = !0, GS_proxy.send("onSetting", { enable: !0, target: "all", option: "onlineuser" }))) : (null == Gensee_STATUS_USER_LINE || Gensee_STATUS_USER_LINE) && (Gensee_STATUS_USER_LINE = !1, GS_proxy.send("onSetting", { enable: !1, target: "all", option: "onlineuser" })) } } }, qaListDealFunction: function (e) { var t = {}; t.list = new Array; for (var a = 0; a < e.list.length; a++) { for (var i = e.list[a], n = new Array, s = 0; s < e.list.length; s++)e.list[s].id == i.id && (n.push(e.list[s]), e.list.splice(s, 1), s--); if (!n[n.length - 1].remove) for (var l = 0; l < n.length; l++)n[l].remove || (0 == l ? t.list.push(n[l]) : "" != n[l].answer && t.list.push(n[l])); a-- } GS_proxy.send("onQAList", t) }, lottery: function (e) { var t = {}; t.array = new Array; for (var a = analysis.parseXml(e), i = a.documentElement, n = i.getElementsByTagName("lottery"), s = 0; s < n.length; s++) { var l = {}, o = n[s]; l.cmd = analysis.getXmlNodeAttr(o, "cmd"), l.timestamp = analysis.dealStartTime(analysis.getXmlNodeAttr(o, "timestamp")), l.info = analysis.getXmlNodeAttr(o, "info"), t.array.push(l) } return t }, evalstr: function (e) { logger.log("evalstr:" + e); var t = e.split("({"); switch (logger.log(t), t[0]) { case "pingresult": var a = e.replace("pingresult(", "").replace("})", "}"); logger.log(a); var i = JSON.parse(a); media.pingresult(i); break; case "joinresult": var a = e.replace("joinresult(", "").replace("})", "}"), i = JSON.parse(a); media.joinresult(i); break; case "metadata": var a = e.replace("metadata(", "").replace("})", "}"); media.metadata(a) } }, getJSON: function (e) { wx.request({ url: e, header: { "content-type": "application/json" }, success: function (e) { logger.log("getJSON success:" + e.data); try { media.evalstr(e.data) } catch (e) { logger.log("deal data is exception," + e) } }, fail: function (e) { logger.log("getJSON fail:" + JSON.stringify(e)) } }) }, lotteryDealFunction: function (e) { for (var t = e.array, a = 0; a < t.length; a++) { var i = {}, n = t[a]; n.cmd == Gensee_Lottery_Start ? i.action = "start" : n.cmd == Gensee_Lottery_End ? i.action = "stop" : n.cmd == Gensee_Lottery_Abort && (i.action = "abort"), i.user = n.info, GS_proxy.send("onLottery", i) } }, qaDealFunction: function (e) { var t = e.qaArray; for (i in t) { var a = t[i]; 1 != a.removed && "true" != a.removed ? (a.cmd = void 0, a.publishtimestamp = void 0, GS_proxy.send("onQA", a)) : GS_proxy.send("onQARemove", { id: a.id }) } if (e.pushQaList) for (var i = 0; i < e.pushQaList.length; i++) { var n = e.pushQaList[i], s = Gensee_Deal_Function.PUSH_QA; "cancelHighlight" == n.cmd && (s = Gensee_Deal_Function.CANCEL_QA), "highlight" == n.cmd && (s = Gensee_Deal_Function.ANSWER_QA), GS_proxy.send(s, { id: n.questionid }) } }, emsDealFunction: function (e) { logger.log("[emsDealFunction]start"); for (var t = 0; t < e.length; t++) { var a = e[t], i = "", n = ""; if ("publicMsg" == a.type) i = "onMessage", n = { content: a.content }; else if ("close" == a.type) n = {}, i = "onStop", Gensee_VIDEO_STATUS_CMD = "stop", media.jumpTipInfo(JUMPTYPE_TIP_VIDEO_END); else if ("pause" == a.type) n = {}, i = "onPause", Gensee_VIDEO_STATUS_CMD = "pause"; else if ("ejectUser" == a.type || "ejectdup" == a.type) i = "onKickOut", Gensee_VIDEO_STATUS_CMD = "kickout", "ejectUser" == a.type ? n = { reason: "0" } : "ejectdup" == a.type && (n = { reason: "1" }), media.jumpTipInfo(JUMPTYPE_TIP_REPORT_LONGIN); else if ("start" == a.type) n = {}, i = "onStart"; else if ("rollCall" == a.type) { if (Gensee_ROLL_CALL_TYPE = null, i = "onRollcall", a.timeout >= 0) { var s = (new Date).getTime() + Math.random(); s = Math.round(1e5 * s), n = { timeout: a.timeout, id: s }, Gensee_Roll_Call = { timeout: a.timeout, id: s }, Gensee_Roll_Call.deal = !1, clearTimeout(Gensee_Roll_Call_Timeout), Gensee_Roll_Call_Timeout = setTimeout(function () { null == Gensee_Roll_Call || Gensee_Roll_Call.deal || (sendMessage.sendRollCall(3), Gensee_Roll_Call = null) }, 1e3 * n.timeout) } else sendMessage.sendRollCall(3); sendMessage.sendRollCall(1) } else if ("rollCall2" == a.type) { if (!(a.timeout >= 0)) continue; Gensee_ROLL_CALL_TYPE = "rollCall2", i = "onRollcall", n = { timeout: a.timeout, id: a.senderid }, Gensee_Roll_Call = { timeout: a.timeout, id: a.senderid }, Gensee_Roll_Call.deal = !1 } else { if ("chat" == a.type) { var l = a; l.type = void 0, GS_proxy.send("onPriChat", l); continue } if ("chat_all" == a.type) { var l = a; l.type = void 0, chat.loadChat(l); continue } if ("chat_third" == a.type) { var o = {}, l = a; o.richtext = a.richtext, o.type = void 0, o.senderId = void 0, o.senderUid = void 0, o.role = void 0; GS_proxy.send("onThirdPartChat", { content: o }); continue } if ("muteChat" == a.type) { n = {}, 1 == a.on ? (n.enable = !1, sendMessage.sendFocus({ isFilterQuestion: !0 })) : 0 == a.on && (n.enable = !0, sendMessage.sendFocus({ isFilterQuestion: !1 })), n.type = void 0, n.target = "self", n.option = "question", i = "onSetting"; var r = n.enable; GS_proxy.send(i, { enable: r, target: "self", option: "chat" }) } else if ("qaenable" == a.type) n = {}, "false" == a.enable ? (Gensee_Status_QA = !1, n.enable = !1) : "true" == a.enable && (Gensee_Status_QA = !0, n.enable = !0), n.type = void 0, n.target = "all", n.option = "question", i = "onSetting"; else if ("chatenable" == a.type) n = {}, "false" == a.enable ? (Gensee_Status_Chat = !1, n.enable = !1) : "true" == a.enable && (Gensee_Status_Chat = !0, n.enable = !0), n.type = void 0, n.target = "all", n.option = "chat", i = "onSetting"; else { if ("onRosterInfolist" == a.type) { logger.log("[onRosterInfolist]:" + a.list.length), a.list.length > 0 && GS_proxy.send("onUserList", { list: a.list }), a.joinList.length > 0 && GS_proxy.send("onUserJoin", { list: a.joinList }), a.leaveList.length > 0 && GS_proxy.send("onUserLeave", { list: a.leaveList }), a.updateList.length > 0 && GS_proxy.send("onUserUpdate", { list: a.updateList }), a.disabled ? GS_proxy.send("onSetting", { enable: !1, target: "all", option: "userlist" }) : null != Gensee_STATUS_USER_LIST && Gensee_STATUS_USER_LIST || GS_proxy.send("onSetting", { enable: !0, target: "all", option: "userlist" }), Gensee_STATUS_USER_LIST = !a.disabled; continue } if ("resume" == a.type) n = {}, i = "onPlay", Gensee_VIDEO_STATUS_CMD = "resume", logger.log("[emsDealFunction]:resume:"), isCouldTip_Resume = !0, taskObj.executeAllTask(), media.toldPlay(); else { if ("user.rostrum" == a.type) { n = { hostid: a.globaluserid }, logger.log("[onUserHost]:"), null == Gensee_Asker_User_Id && ("0" == n.hostid && n.hostid - 0 == 0 || (null == Gensee_UP_HOST ? Gensee_UP_HOST = setTimeout(function () { Gensee_VIDEO_START_INIT = !0, null == Gensee_VIDEO_START_CURRENT_TIME || app.globalData.currentTime <= Gensee_VIDEO_START_CURRENT_TIME ? (logger.log("[resetvideo]is start:" + new Date + ";" + (new Date).getTime()), taskObj.executeAllTask()) : logger.log("[resetvideo]is null.") }, 1e4) : (clearTimeout(Gensee_UP_HOST), taskObj.executeAllTask()))); continue } if ("user.asker" == a.type) { n = { askerid: a.globaluserid }, logger.log("[onUserAsker]:"), null == Gensee_Host_User_Id && ("0" == n.askerid && n.askerid - 0 == 0 || (null == Gensee_UP_HOST ? Gensee_UP_HOST = setTimeout(function () { Gensee_VIDEO_START_INIT = !0; getMediaObje(); null == Gensee_VIDEO_START_CURRENT_TIME || app.globalData.currentTime <= Gensee_VIDEO_START_CURRENT_TIME ? (logger.log("[resetvideo]is start:" + new Date + ";" + (new Date).getTime()), taskObj.executeAllTask()) : logger.log("[resetvideo]is null.") }, 1e4) : (clearTimeout(Gensee_UP_HOST), taskObj.executeAllTask()))); continue } if ("class.mode" == a.type) i = "onClassMode", n = { mode: a.mode }; else if ("RoleStatus" == a.type) i = "onRoleStatus", n = { hostid: a.hostid, hostname: a.hostname, presid: a.presid, presname: a.presname }; else if ("tip" == a.type) i = "onRewardMessage", n = { id: a.content.id, amount: a.content.amount, userid: a.content.userid, username: a.content.username }; else { if ("delchat" != a.type) continue; i = "onChatRemove", n = { censorList: a.censorList } } } } } GS_proxy.send(i, n) } }, toldPlay: function () { if (logger.log("执行toldplay"), initFlag) { taskObj.start(), logger.log("[toldPlay] initFlag:" + initFlag); var e = playingUrl; if ("stop" != Gensee_VIDEO_STATUS_CMD && "kickout" != Gensee_VIDEO_STATUS_CMD) return hasSendPlay ? (logger.log("[toldPlay]To play video or audio"), !0) : isCouldPlaying ? tool.checkObjectIsNull(e) ? (logger.log("[toldPlay]The url is undefined."), !1) : (void 0 !== websocketServer && media.onSocketMessage(playingCmd) ? (toldPlayWebsocketCmd = !0, logger.log("send websocket toldPlay cmd")) : (logger.log("send websocket is fail."), pollingObject.sendNum = pollingObject.sendNum + 1, media.getJSON(e), logger.log("[told play url]：" + e)), hasSendPlay = !0, !0) : (logger.log("[toldPlay] The video url is unload."), !1); logger.log("[toldPlay] fail the video is ended or the user is kickouted") } else logger.log("media init fail") }, jumpTipInfo: function (e) { e != JUMPTYPE_LIVE_UNOPEN || isAreadyTip_Unopen ? e != JUMPTYPE_NOT_ENOUGH_AUTHORIZED || isAreadyTip_Authorized ? e == JUMPTYPE_TIP_COULD_OPEN && isAreadyTip_Unopen && !isAreadyTip_Open ? isAreadyTip_Open = !0 : e != JUMPTYPE_TIP_VIDEO_END || isAreadyTip_End || isAreadyTip_Ejectdup ? e == JUMPTYPE_TIP_WEBCASRT_PAUSE ? isCouldTip_Resume || (isAreadyTip_Pause = !0, isCouldTip_Resume = !0) : e == JUMPTYPE_TIP_WEBCASRT_RESUME && isAreadyTip_Pause ? (isAreadyTip_Pause = !1, isCouldTip_Resume = !1) : e == JUMPTYPE_TIP_REPORT_LONGIN ? (isAreadyTip_Ejectdup = !0, media.closedAllInfo(), media.sendLeaveInfo()) : "lock_ip" == e && GS_proxy.send("onStatus", { type: 8, explain: "该用户已被封，加入失败" }) : (media.closedAllInfo(), isAreadyTip_End = !0) : (GS_proxy.send("onStatus", { type: 1, explain: tipObj.authorized }), isAreadyTip_Authorized = !0) : (GS_proxy.send("onStatus", { type: 2, explain: tipObj.unopen }), isAreadyTip_Unopen = !0) }, closedAllInfo: function () { clearInterval(timeoutObj), tool.checkObjectIsNull(websocketServer) || websocketServer.close({ fail: function (e) { logger.log("closed" + e) } }) }, pauseDetail: function () { taskObj.executeAllTask(), intervalTaskId = setInterval(function () { taskObj.executeAllTask() }, 1e3), refreshflag && clearInterval(intervalTaskId), pauseFlag = !0 }, initBindPause: function () { Gensee_VIDEO_Status = "pause", hasSendPlay = !1, hasSendPlay = !1, logger.log("[initBindPause]The video is " + hasSendPlay), pauseObj.pauseTimeDate = (new Date).getTime(), pauseObj.pauseVideoTime = app.globalData.currentTime, pauseObj.isPause = !0, pauseOutId = setTimeout(media.pauseDetail, 1e4) }, resetInitTime: function () { try { var e = resetInittimeUrl; if (isPlayEnd) return void logger.log("[the live is end]"); if (isCouldPlaying) { if (tool.checkObjectIsNull(e)) return logger.log("[toldPlay]The url is undefined."), !1; var t = resetInittimeCmd; return null !== websocketServer && onSocketMessage(t) || (logger.log("send websocket is fail."), pollingObject.sendNum = pollingObject.sendNum + 1, logger.log("toldPlay url " + e), media.getJSON(e), taskObj.executeAllTask(), logger.log("[told resetInitTime url]：" + resetInittimeUrl)), !0 } return logger.log("[toldPlay] The video url is unload."), !1 } catch (e) { return logger.log("Throw the exception" + e), !1 } }, initBindPlay: function () { if (pauseOutId && clearTimeout(pauseOutId), pauseFlag) { intervalTaskId && clearInterval(intervalTaskId), taskObj.executeAllTask(); var e = playAudioUrl.indexOf("&t=") + 3; playAudioUrl = e > 2 ? playAudioUrl.substring(0, e) + (new Date).getTime() : playAudioUrl, logger.log("刷新playAudiourl-----------" + playAudioUrl); var t = playMediaUrl.indexOf("&t=") + 3; playMediaUrl = t > 2 ? playMediaUrl.substring(0, t) + (new Date).getTime() : playMediaUrl, logger.log("刷新playMediaUrl-----------" + playMediaUrl), GS_proxy.send("onVideoUrl", playMediaUrl), GS_proxy.send("onAudioUrl", playAudioUrl); var a = media.resetInitTime(); logger.log("刷新resetinittime-----------" + a), pauseFlag = !1 } }, initBindEnded: function () { Gensee_VIDEO_Status = "ended", logger.log("[ended]videoEnd.isWebcastClosed is " + videoEnd.isWebcastClosed), videoEnd.isWebcastClosed ? (isPlayEnd = !0, logger.log("[ended]" + isPlayEnd), media.jumpTipInfo(JUMPTYPE_TIP_VIDEO_END), logger.log("[ended]" + $("#" + nowPlayId).attr("src")), closeTipNextFunction = function () { }) : videoEnd.isVideoEnd = !0 }, initBindWaiting: function () { logger.log("[waiting]The waiting "), videoEnd.isWebcastClosed ? (media.jumpTipInfo(JUMPTYPE_TIP_VIDEO_END), closeTipNextFunction = function () { }) : (waitnum++ , logger.log("videoEnd.isVideoWaiting: " + videoEnd.isVideoWaiting), videoEnd.isVideoWaiting = !0) }, initBindPlaying: function () { logger.log("initBindPlaying"), bindPlayingFlag || "pause" == Gensee_VIDEO_STATUS_CMD || GS_proxy.send("onPlay", {}), bindPlayingFlag = !0, isFirstCanPlay && (GS_proxy.send("onStatus", { type: 9, explain: "视频第一次缓冲播放开始" }), isFirstCanPlay = !1), Gensee_VIDEO_START_CURRENT_TIME = app.globalData.currentTime, logger.log("videoEnd.isVideoWaiting: " + videoEnd.isVideoWaiting), videoEnd.isVideoWaiting = !1, Gensee_VIDEO_Status = "play" }, sendLeaveInfo: function () { logger.log("[sendLeaveInfo]The url" + closedUrl), media.getJSON(closedUrl) } }, GS_proxy = { defaultObj: { chatSubmitDate: new Array, qaSubmitDate: new Array }, getSubmitDate: function (e, t) { var a; if (e.length > 0) for (var i = 0; e.length > i; i++) { var n = e[i]; if (n.frameName == t) { a = n; break } } return tool.checkObjectIsNull(a) && (a = { frameName: t, submitDate: 0 }, e.push(a)), a }, send: function (e, t) { channel.send(e, t) }, bind: function (e, t) { "submitchat" == e.toLowerCase() && channel.bind("submitChat", function (e) { var t = (new Date).getTime(), a = {}; if ("" != submitInterval && submitInterval - 0 > 1 && (a = GS_proxy.getSubmitDate(GS_proxy.defaultObj.chatSubmitDate), 1e3 * submitInterval > t - a.submitDate)) return tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !1 }), !1; a.submitDate = t; var i = sendMessage.sendChatDataAll(e.data); e.data.uuidStr = i, tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !0 }) }), "submitquestion" == e.toLowerCase() && channel.bind("submitQuestion", function (e) { var t = (new Date).getTime(); e.data.id = tool.createUUID(); var a = {}; if ("" != submitInterval && submitInterval - 0 > 1 && (a = GS_proxy.getSubmitDate(GS_proxy.defaultObj.qaSubmitDate), 1e3 * submitInterval > t - a.submitDate)) return void (tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !1 })); a.submitDate = t, sendMessage.sendData(e.data), tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !0 }) }), "uploadlogfile" == e.toLowerCase() && channel.bind("uploadLogFile", function (e) { sendMessage.uploadLogFile(e.data) }), "submitchatto" == e.toLowerCase() && channel.bind("submitChatTo", function (e) { var t = (new Date).getTime(), a = {}; if ("" != submitInterval && submitInterval - 0 > 1 && (a = GS_proxy.getSubmitDate(GS_proxy.defaultObj.chatSubmitDate), 1e3 * submitInterval > t - a.submitDate)) return tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !1 }), !1; a.submitDate = t, sendMessage.sendChatData(e.data), tool.isFunction(e.cb) && e.cb.call(void 0, { data: e.data, result: !0 }) }), "submitvote" == e.toLowerCase() && channel.bind("submitVote", function (e) { sendMessage.submitVote(e.data) }), "submitrollcall" == e.toLowerCase() && channel.bind("submitRollcall", function (e) { sendMessage.submitRollcall(e.data) }), "submitnetchoice" == e.toLowerCase() && channel.bind("submitNetChoice", function (e) { sendMessage.submitNetChoice(e.data) }), "requirenetsettings" == e.toLowerCase() && channel.bind("requireNetSettings", function (e) { GS_proxy.send("onNetSettings", media.getIDCArray()) }), "submitanswersheet" == e.toLowerCase() && channel.bind("submitAnswerSheet", function (e) { sendMessage.submitAnswerSheet(e.data) }) } }, txt_con = new Array, txt_time = "", chat = { loadChat: function (e) { txt_con.push(e), "" == txt_time && (txt_time = setTimeout(chat.txt_echo, 100)) }, txt_echo: function () { GS_proxy.send("onPublicChat", txt_con), clearTimeout(txt_time), txt_time = "", txt_con = new Array } }, sendMessage = { escapeContent: function (e) { if (!tool.checkObjectIsNull(e)) { var t = sendMessage.replayFontSetting(e); e = t.richtext, e = e.replace(/\$/gi, "$0"), e = e.replace(/\<div\>/gi, ""), e = e.replace(/\<\/div\>/gi, "$br"), e = e.replace(/\<p\>/gi, ""), e = e.replace(/\<\/p\>/gi, "$br"), e = e.replace(/\<br\/\>/gi, "$br"), e = e.replace(/\<br\>/gi, "$br"), e = e.replace(/\</gi, "&lt;"), e = e.replace(/\</gi, "&lt;"), e = e.replace(/\>/gi, "&gt;"), e = e.replace(/["]/gi, "&quot;"), e = e.replace(/[']/gi, "&#39;"), e = e.replace(/\//gi, "&#47;"), e = e.replace(/\\/gi, "&#92;"), e = e.replace(/\$br/gi, "<br/>"), e = e.replace(/\$0/gi, "$"), e = t.startReplaceContent + e + t.endReplaceContent } return e }, replayFontSetting: function (e) { var t = {}; if (t.richtext = e, t.startReplaceContent = "", t.endReplaceContent = "", 0 == e.indexOf("<font")) { var a = e.indexOf(">"), i = e.substring(0, a + 1), n = e.indexOf("</font>"); if (n > 0 && n + "</font>".length == e.length) { var s = e.substring(n); t.richtext = e.substring(a + 1, n), t.startReplaceContent = i, t.endReplaceContent = s } } return t }, sendFocus: function (e) { var t = Gensee_Now_Status_Call, a = tool.extend({}, Gensee_Statu_default, e); Gensee_Statu_default = a, logger.log("[sendFocus]the "); var i = 1 == t ? a.ROLLCALL_STARTING : 2 == t ? a.ROLLCALL_PRESENT : 3 == t ? a.ROLLCALL_ABSENT : 0, n = !(a.isMute && !a.isAudioChatting) && (isNaN(a.isActive) ? a.isFocus : 1 == a.isActive), s = (a.isFilterQuestion ? a.USER_STATUS_MUTE_CHAT : a.USER_STATUS_DEFAULT) | (a.isWantToUpgrade ? a.USER_REQUEST_UPGRADE : a.USER_STATUS_DEFAULT) | (n ? a.USER_STATUS_DEFAULT : a.USER_STATUS_FOCUS) | i | (a.isAudioInviting ? a.WEB_AUDIO_INVITE : a.USER_STATUS_DEFAULT) | (a.isAudioChatting ? a.WEB_AUDIO_CHATTING : a.USER_STATUS_DEFAULT), l = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "ems" }] }, "UTF-8"), o = xmloperation.createNode({ nodeName: "focus", attrArray: [{ name: "userstatus", value: s }] }), l = xmloperation.addNode(l, o); logger.log("[sendRollCall]The data is " + l), sendMessage.sendContentByJson("&data=" + encodeURIComponent(l) + "&callback=?&lasttimestamp=" + lasttimestamp) }, submitQuestion: function (e) { tool.checkObjectIsNull(e) || tool.checkObjectIsNull(e.content) ? sendMessage.sendErrorInfo({ api: "submitQuestion", param: e, explain: "format error.", type: 2 }) : sendMessage.sendData(e) }, sendErrorInfo: function (e) { GS_proxy.send("onAPIError", e) }, chatFilterByRichtext: function (e, t) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var a = (new Date).getTime(); wx.request({ url: wordsFilterApi + "/wordfilter/query?siteid=" + c_siteid + "&confid=" + c_confid + "&servicetype=" + c_servicetype + "&text=" + encodeURIComponent(e) + "&timestamp=" + a, header: { "content-type": "application/json" }, success: function (e) { var a = e.data; "0" == a.rc ? (t.richtext = a.text, sendMessage.emotionContent(t)) : "1002" == a.rc ? logger.log("Text filtering failed.") : logger.log("the status of data is unknown:" + a.rc), sendMessage.sendChatData(t) }, complete: function (e) { }, fail: function (e) { sendMessage.emotionContent(t), sendMessage.sendChatData(t) } }) } else logger.log("The send chat Data is fail,the user is mute.") }, chatFilterByContent: function (e, t) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var a = (new Date).getTime(); wx.request({ url: wordsFilterApi + "/wordfilter/query?siteid=" + c_siteid + "&confid=" + c_confid + "&servicetype=" + c_servicetype + "&text=" + encodeURIComponent(e) + "&timestamp=" + a, header: { "content-type": "application/json" }, success: function (e) { var a = e.data; "0" == a.rc ? (t.content = a.text, sendMessage.emotionRichtext(t)) : "1002" == a.rc ? logger.log("Text filtering failed.") : logger.log("the status of data is unknown:" + a.rc), sendMessage.sendChatData(t) }, complete: function (e) { }, fail: function (e) { sendMessage.emotionRichtext(t), sendMessage.sendChatData(t) } }) } else logger.log("The send chat Data is fail,the user is mute.") }, submitChatTo: function (e) { tool.checkObjectIsNull(e.security) || "default" == e.security ? (tool.checkObjectIsNull(e.richtext) || (e.richtext = e.richtext.replace(/\<script/gi, ""), e.richtext = e.richtext.replace(/&lt;script/gi, "")), tool.checkObjectIsNull(e.content) || (e.content = e.content.replace(/\<script/gi, ""), e.content = e.content.replace(/&lt;script/gi, "")), tool.checkObjectIsNull(e.richtext) || "" == e.richtext ? "" != wordsFilterApi ? sendMessage.chatFilterByContent(e.content, e) : (sendMessage.emotionRichtext(e), sendMessage.sendChatData(e)) : "" != wordsFilterApi ? sendMessage.chatFilterByRichtext(e.richtext, e) : (sendMessage.emotionContent(e), sendMessage.sendChatData(e))) : tool.checkObjectIsNull(e.richtext) || "" == e.richtext ? "" != wordsFilterApi ? sendMessage.chatFilterByContent(e.content, e) : (sendMessage.emotionRichtext(e), sendMessage.sendChatData(e)) : (e.richtext = sendMessage.escapeContent(e.richtext), "" != wordsFilterApi ? sendMessage.chatFilterByRichtext(e.richtext, e) : (sendMessage.emotionContent(e), sendMessage.sendChatData(e))) }, chatAllFilterByContent: function (e, t) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var a = (new Date).getTime(); wx.request({ url: wordsFilterApi + "/wordfilter/query?siteid=" + c_siteid + "&confid=" + c_confid + "&servicetype=" + c_servicetype + "&text=" + encodeURIComponent(e) + "&timestamp=" + a, header: { "content-type": "application/json" }, success: function (e) { "0" == data.rc ? (t.content = data.text, sendMessage.emotionRichtext(t)) : "1002" == data.rc ? logger.log("Text filtering failed.") : logger.log("the status of data is unknown:" + data.rc), sendMessage.sendChatDataAll(t) }, complete: function (e) { }, fail: function (e) { sendMessage.emotionRichtext(t), sendMessage.sendChatDataAll(t) } }) } else logger.log("The send chat Data is fail,the user is mute.") }, chatAllFilterByRichtext: function (e, t) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var a = (new Date).getTime(); wx.request({ url: wordsFilterApi + "/wordfilter/query?siteid=" + c_siteid + "&confid=" + c_confid + "&servicetype=" + c_servicetype + "&text=" + encodeURIComponent(e) + "&timestamp=" + a, header: { "content-type": "application/json" }, success: function (e) { var a = e.data; "0" == a.rc ? (t.richtext = a.text, sendMessage.emotionContent(t)) : "1002" == a.rc ? logger.log("Text filtering failed.") : logger.log("the status of data is unknown:" + a.rc), sendMessage.sendChatDataAll(t) }, complete: function (e) { }, fail: function (e) { sendMessage.emotionContent(t), sendMessage.sendChatDataAll(t) } }) } else logger.log("The send chat Data is fail,the user is mute.") }, replace: function (e, t) { for (var a = 0; a < t.length; a++) { var i = t[a]; e = e.replace(i[0], i[1]) } return e }, emotionRichtext: function (e) { e.richtext = sendMessage.replace(e.content, [[/&/gi, "&amp;"]]), e.richtext = sendMessage.replace(e.richtext, [[/\</gi, "&lt;"], [/\>/gi, "&gt;"], [/\n/g, "<br/>"], [/["]/gi, "&quot;"], [/[']/gi, "&#39;"], [/\//gi, "&#47;"], [/\\/gi, "&#92;"]]) }, emotionContent: function (e) { e.content = sendMessage.replace(e.richtext, [[/&quot;/gi, '"'], [/&#39;/gi, "'"], [/&#47;/gi, "/"], [/&#92;/gi, "\\"], [/&amp;/gi, "&"], [/&nbsp;/gi, " "], [/\<br\>/gi, String.fromCharCode(10)], [/&lt;/gi, "<"], [/&gt;/gi, ">"], [/\<br\/\>/gi, String.fromCharCode(10)], [/\<\/div\>/gi, String.fromCharCode(10)], [/\<div\>/gi, ""], [/\<p\>/gi, ""], [/\<\/p\>/gi, String.fromCharCode(10)]]) }, submitChat: function (e) { tool.checkObjectIsNull(e.security) || "default" == e.security ? (tool.checkObjectIsNull(e.richtext) || (e.richtext = e.richtext.replace(/\<script/gi, ""), e.richtext = e.richtext.replace(/&lt;script/gi, "")), tool.checkObjectIsNull(e.content) || (e.content = e.content.replace(/\<script/gi, ""), e.content = e.content.replace(/&lt;script/gi, "")), tool.checkObjectIsNull(e.richtext) || "" == e.richtext ? "" != wordsFilterApi ? sendMessage.chatAllFilterByContent(e.content, e) : (sendMessage.emotionRichtext(e), sendMessage.sendChatDataAll(e)) : "" != wordsFilterApi ? sendMessage.chatAllFilterByRichtext(e.richtext, e) : (sendMessage.emotionContent(e), sendMessage.sendChatDataAll(e))) : tool.checkObjectIsNull(e.richtext) || "" == e.richtext ? "" != wordsFilterApi ? sendMessage.chatAllFilterByContent(e.content, e) : (sendMessage.emotionRichtext(e), sendMessage.sendChatDataAll(e)) : (e.richtext = sendMessage.escapeContent(e.richtext), "" != wordsFilterApi ? sendMessage.chatAllFilterByRichtext(e.richtext, e) : (sendMessage.emotionContent(e), sendMessage.sendChatDataAll(e))) }, qaFilter: function (e, t) { wx.request({ url: wordsFilterApi + "/wordfilter/query?siteid=" + c_siteid + "&confid=" + c_confid + "&servicetype=" + c_servicetype + "&text=" + encodeURIComponent(e.content) + "&timestamp=" + t, header: { "content-type": "application/json" }, success: function (t) { var a = t.data; "0" == a.rc ? e.content = a.text : "1002" == a.rc ? logger.log("Text filtering failed.") : logger.log("the status of data is unknown:" + a.rc), sendMessage.sendDataFilter(e) }, complete: function (e) { }, fail: function (t) { sendMessage.sendDataFilter(e) } }) }, sendData: function (e) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_QA) { var t = (new Date).getTime(); "" != wordsFilterApi ? sendMessage.qaFilter(e, t) : sendMessage.sendDataFilter(e) } }, sendDataFilter: function (e) { var t = ""; t = e.id ? e.id : tool.createUUID(); var a = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "qa" }, { name: "userid", value: c_userid }] }, "UTF-8"), i = xmloperation.createNode({ nodeName: "qamsg", value: e.content, attrArray: [{ name: "name", value: c_username }, { name: "id", value: t }] }, !0), a = xmloperation.addNode(a, i); return logger.log("[sendData]The send content is:" + a), !tool.checkObjectIsNull(sendUrl) && (sendMessage.sendContentByJson("&data=" + encodeURIComponent(a) + "&callback=?&lasttimestamp=" + lasttimestamp), !0) }, sendChatData: function (e) { if (logger.log(" wo shi sendchatdata"), !Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var t = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "chat" }, { name: "userid", value: e.receiverId }] }, "UTF-8"), a = xmloperation.createNodeText({ nodeName: "ems", value: e.content, textArray: [{ nodeName: "richtext", value: e.richtext }], attrArray: [{ name: "type", value: "chat" }, { name: "sender", value: c_username }, { name: "senderId", value: c_userid }, { name: "group", value: "0" }] }), t = xmloperation.addNode(t, a); logger.log("[sendData]The send content is:" + t), sendMessage.sendContentByJson("&data=" + encodeURIComponent(t) + "&callback=?&lasttimestamp=" + lasttimestamp) } else logger.log("The send chat Data is fail,the user is mute.") }, submitAnswerSheet: function (e) { var t = sendMessage.checkVote(e); if (e.rootType = "card", !t.result) { var a = { api: "submitAnswerSheet", param: JSON.stringify(e), explain: t.explain, type: t.type }; return void sendMessage.sendErrorInfo(a) } sendMessage.sendVoteOrSurvery([sendMessage.dealVoteSubmit(e)]) }, sendContentByJson: function (e) { !tool.checkObjectIsNull(websocketServer) && socketOpen ? media.onSocketMessage(sendCmd + e) ? logger.log("The websocketServer send content is success.") : (logger.log("The websocketServer send content is fail."), media.getJSON(sendUrl + e)) : (logger.log("The websocketServer cann't send content."), media.getJSON(sendUrl + e)) }, sendChatDataAll: function (e) { if (!Gensee_Statu_default.isFilterQuestion && Gensee_Status_Chat) { var t = ""; t = e.id ? e.id : tool.createUUID(); var a = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "groupchat" }] }, "UTF-8"), i = xmloperation.createNodeText({ nodeName: "ems", value: e.content, textArray: [{ nodeName: "richtext", value: e.richtext }], attrArray: [{ name: "type", value: "chat" }, { name: "sender", value: c_username }, { name: "senderId", value: c_userid }, { name: "group", value: "1" }, { name: "id", value: t }] }), a = xmloperation.addNode(a, i); return logger.log("[sendData]The send content is:" + a), sendMessage.sendContentByJson("&data=" + encodeURIComponent(a) + "&callback=?&lasttimestamp=" + lasttimestamp), t } logger.log("The send chat Data is fail,the user is mute.") }, submitVote: function (e) { e.rootType = "vote"; var t = sendMessage.checkVote(e); if (!t.result) return void sendMessage.sendErrorInfo({ api: "submitVote", param: e, explain: t.explain, type: t.type }); sendMessage.sendVoteOrSurvery([sendMessage.dealVoteSubmit(e)]) }, checkVote: function (e) { if (tool.checkObjectIsNull(e)) return { result: !1, type: 2, explain: "lack attribute" }; if (tool.checkObjectIsNull(e.id) || tool.checkObjectIsNull(e.questions)) return { result: !1, type: 2, explain: "lack attribute" }; if (tool.checkObjectIsNull(e.questions.length) || e.questions.length <= 0) return { result: !1, type: 1, explain: "format error" }; for (var t = 0; t < e.questions.length; t++) { var a = e.questions[t]; if (tool.checkObjectIsNull(a.type)) return { result: !1, type: 2, explain: "lack attribute" }; if ("text" == a.type) { if (tool.checkObjectIsNull(a.text)) return { result: !1, type: 2, explain: "lack attribute" } } else { if ("multi" != a.type && "single" != a.type) return { result: !1, type: 1, explain: "the value of type is wrong." }; if (tool.checkObjectIsNull(a.items)) return { result: !1, type: 2, explain: "lack attribute" }; if (tool.checkObjectIsNull(a.items.length) || a.items.length <= 0) return { result: !1, type: 1, explain: "format error" }; for (var i = 0; i < a.items[i]; i++) { var n = a.items[i]; if (tool.checkObjectIsNull(n.selected) || tool.checkObjectIsNull(n.id)) return { result: !1, type: 2, explain: "lack attribute" } } } } return { result: !0 } }, dealVoteSubmit: function (e) { var t = {}; t.rootType = e.rootType, t.ver = e.ver, t.id = e.id, t.question = new Array; for (var a = 0; a < e.questions.length; a++) { var i = e.questions[a], n = {}; if (n.id = i.id, n.items = new Array, "text" == i.type) n.items.push({ text: i.text }); else for (var s = 0; s < i.items.length; s++) { var l = i.items[s]; "true" != l.selected && 1 != l.selected || n.items.push({ id: l.id, index: s }) } t.question.push(n) } return t }, sendVoteOrSurvery: function (e) { for (var t = sendMessage.generationDate(e), a = 0; a < t.length; a++) { var i = t[a]; "service" == i.type && sendMessage.sendContentByJson("&callback=?&lasttimestamp=" + lasttimestamp + "&data=" + encodeURIComponent(i.xmlContent)) } }, generationDate: function (e) { for (var t = new Array, a = 0; a < e.length; a++) { var i = sendMessage.createServiceXml(e[a]), n = { type: "service", xmlContent: i }; t.push(n) } return t }, createWebXml: function (e) { var t = e.rootType, a = "voteSubmit", i = "vote" == t; i || (a = "surveySubmit"); for (var n = xmloperation.createXml({ nodeName: a, attrArray: [{ name: "siteid", value: c_siteid }, { name: "userid", value: c_userid }, { name: "username", value: c_username }, { name: "confid", value: c_confid }, { name: "live", value: "true" }] }, "UTF-8"), s = xmloperation.createNode({ nodeName: "command", attrArray: [{ name: "id", value: e.id }] }), l = e.questions, o = 0; o < l.length; o++) { for (var r = l[o], c = xmloperation.createNode({ nodeName: "question", attrArray: [{ name: "id", value: r.id }] }), d = 0; d < r.items.length; d++) { var u = r.items[d]; if (tool.checkObjectIsNull(u.text)) { var m = xmloperation.createNode({ nodeName: "item", attrArray: [{ name: "idx", value: u.index }] }); c = xmloperation.addNode(c, m) } else { if (i) var m = xmloperation.createNode({ nodeName: "item", value: u.text, attrArray: [{ name: "idx", value: 0 }] }); else var m = xmloperation.createNode({ nodeName: "item", value: u.text }); c = xmloperation.addNode(c, m) } } s = xmloperation.addNode(s, c) } return n = xmloperation.addNode(n, s), logger.log("[createWebXml]The content:" + n), n }, createServiceXml: function (e) { for (var t = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "vote" }, { name: "userid", value: c_userid }, { name: "site", value: c_siteid }, { name: "live", value: "true" }, { name: "confid", value: c_confid }, { name: "username", value: c_username }, { name: "ver", value: e.ver }] }, "UTF-8"), a = xmloperation.createNode({ nodeName: "command", attrArray: [{ name: "id", value: e.id }, { name: "type", value: "card" == e.rootType ? "submit_card" : "submit" }, { name: "userid", value: c_userid }] }), i = e.question, n = 0; n < i.length; n++) { for (var s = i[n], l = xmloperation.createNode({ nodeName: "question", attrArray: [{ name: "id", value: s.id }] }), o = 0; o < s.items.length; o++) { var r = s.items[o]; if (tool.checkObjectIsNull(r.text)) { var c = xmloperation.createNode({ nodeName: "item", attrArray: [{ name: "id", value: r.id }, { name: "idx", value: r.index }] }); l = xmloperation.addNode(l, c) } else { var c = xmloperation.createNode({ nodeName: "item", value: r.text, attrArray: [{ name: "idx", value: 0 }, { name: "id", value: "" }] }); l = xmloperation.addNode(l, c) } } a = xmloperation.addNode(a, l) } return t = xmloperation.addNode(t, a), logger.log("[createServiceXml]The content:" + t), t }, submitRollcall: function (e) { null != Gensee_Roll_Call && Gensee_Roll_Call.id == e.id && (clearTimeout(Gensee_Roll_Call_Timeout), Gensee_Roll_Call = null, "rollCall2" == Gensee_ROLL_CALL_TYPE ? sendMessage.sendRollCallACK(e.id) : sendMessage.sendRollCall(2)) }, sendRollCallACK: function (e) { var t = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "rollCall2Ack" }] }, "UTF-8"), a = xmloperation.createNode({ nodeName: "ems", attrArray: [{ name: "type", value: "rollCall2Ack" }, { name: "senderId", value: e }, { name: "destid", value: e }, { name: "time", value: (new Date).getTime() }] }), t = xmloperation.addNode(t, a); logger.log("[sendRollCallACK]The data is " + t), sendMessage.sendContentByJson("&data=" + encodeURIComponent(t) + "&callback=?&lasttimestamp=" + lasttimestamp) }, sendRollCall: function (e, t) { Gensee_Now_Status_Call = e; var a = tool.extend({}, Gensee_Statu_default, t); Gensee_Statu_default = a; var i = 1 == e ? a.ROLLCALL_STARTING : 2 == e ? a.ROLLCALL_PRESENT : 3 == e ? a.ROLLCALL_ABSENT : 0, n = !(a.isMute && !a.isAudioChatting) && (isNaN(a.isActive) ? a.isFocus : 1 == a.isActive), s = (a.isFilterQuestion ? a.USER_STATUS_MUTE_CHAT : a.USER_STATUS_DEFAULT) | (a.isWantToUpgrade ? a.USER_REQUEST_UPGRADE : a.USER_STATUS_DEFAULT) | (n ? a.USER_STATUS_DEFAULT : a.USER_STATUS_FOCUS) | i | (a.isAudioInviting ? a.WEB_AUDIO_INVITE : a.USER_STATUS_DEFAULT) | (a.isAudioChatting ? a.WEB_AUDIO_CHATTING : a.USER_STATUS_DEFAULT), l = xmloperation.createXml({ nodeName: "module", attrArray: [{ name: "name", value: "ems" }] }, "UTF-8"), o = xmloperation.createNode({ nodeName: "rollcall", attrArray: [{ name: "userstatus", value: s }] }), l = xmloperation.addNode(l, o); logger.log("[sendRollCall]The data is " + l), sendMessage.sendContentByJson("&data=" + encodeURIComponent(l) + "&callback=?&lasttimestamp=" + lasttimestamp) }, submitNetChoice: function (e) { sendMessage.choosePriorNetwork(e.label) }, uploadLogFile: function (e, t) { t ? playInfo.userInfo.userid.toString() != parseInt(t) && playInfo.userInfo.username != t || logMangement.uploadLogFile(playInfo.videoInfo.ownerid, playInfo.videoInfo.site, playInfo.videoInfo.ctx, playInfo.userInfo.siteid, playInfo.userInfo.userid, playInfo.userInfo.username, playInfo.logFileInfo, e) : logMangement.uploadLogFile(playInfo.videoInfo.ownerid, playInfo.videoInfo.site, playInfo.videoInfo.ctx, playInfo.userInfo.siteid, playInfo.userInfo.userid, playInfo.userInfo.username, playInfo.logFileInfo, e) }, choosePriorNetwork: function (e) { for (var t = idcArray, a = null, i = 0; i < t.length; i++)if (e == t[i].description) { a = t[i]; break } null != a && c_idc != a.code && (c_idc = a.code, c_ipowner = a.supported, GS_proxy.send("onNetSettings", media.getIDCArray()), ALBurl = visitScheme + connectALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + a.code + "&ipowner=" + a.supported + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?", isOpenBak && (ALBBakUrl = visitScheme + connectBakALBSvr + "/albcmd/ping?siteid=" + c_siteid + "&responsetype=" + c_responsetype + "&confid=" + c_confid + "&confname=" + c_confname + "&confpasswd=" + c_confpassword + "&servicetype=" + c_servicetype + "&userid=" + c_userid + "&idc=" + a.code + "&ipowner=" + a.supported + "&failover=" + c_ping_failover + "&mainidc=" + c_mainidc + "&t=" + Math.random() + "&callback=?"), media.expire()) } }, taskDeal = { annoFirstDealFunction: function (e, t) { taskObj.addTask("annoFirst", e, null, null) }, pptDealFunction: function (e) { for (var t = 0; t < e.pageArray.length; t++) { var a = e.pageArray[t]; if (logger.log("[pptDealFunction]page.starttimestamp :" + a.starttimestamp + ";**" + e.inittimestamp), null != Gensee_Now_Doc_Url_SDK && Gensee_Now_Doc_Url_SDK == a.hls) return; if (Gensee_Now_Doc_Url_SDK = a.hls, taskObj.addTask(Gensee_SDK_Task_PPT_MODULE, a, a.starttimestamp - e.inittimestamp, null), hisAnnoArray.length > 0) { for (var t = 0; t < hisAnnoArray.length; t++) { var i = hisAnnoArray[t]; Gensee_Now_Doc_Url_SDK != i.hls && (hisAnnoArray.splice(t, 1), t--) } taskDeal.annoFirstDealFunction(hisAnnoArray), hisAnnoArray = new Array } refreshflag && (Gensee_Now_Doc_Url_SDK = null) } }, annoDealFunction: function (e) { for (var t = 0; t < e.annoArray.length; t++) { var a = e.annoArray[t]; logger.log("[annoDealFunction]page.starttimestamp :" + a.starttimestamp + ";**" + e.inittimestamp); for (var t = 0; t < a.annoArray.length; t++) { var i = a.annoArray[t]; null != Gensee_Now_Doc_Url_SDK && Gensee_Now_Doc_Url_SDK != i.hls && (a.annoArray.splice(t, 1), t--) } taskObj.addTask(Gensee_SDK_Task_ANNOTATION_SDK, a, a.starttimestamp - e.inittimestamp, null) } } }, analysis = { sortPpt: function (e) { for (var t = 0; t < e.length - 1; t++)for (var a = 0; a < e.length - 1 - t; a++)if (e[a].starttimestamp - e[a + 1].starttimestamp > 0) { var i = e[a]; e[a] = e[a + 1], e[a + 1] = i } return e }, analysisAnno: function (e) { logger.log("[analysisAnno] The content is:" + e); for (var t = {}, a = new Array, i = analysis.parseXml(e), n = i.documentElement, s = n.getElementsByTagName("command"), l = 0; l < s.length; l++) { var o = {}, r = s[l], c = new Array; if (o.id = analysis.getXmlNodeAttr(r, "id"), o.type = analysis.getXmlNodeAttr(r, "type"), o.documentid = analysis.getXmlNodeAttr(r, "documentid"), o.pageid = analysis.getXmlNodeAttr(r, "pageid"), o.color = analysis.getXmlNodeAttr(r, "color"), o.linesize = analysis.getXmlNodeAttr(r, "linesize"), o.fontsize = analysis.getXmlNodeAttr(r, "fontsize"), o.style = analysis.getXmlNodeAttr(r, "style"), o.removed = analysis.getXmlNodeAttr(r, "removed"), o.starttimestamp = 1e3 * Number(analysis.getXmlNodeAttr(r, "timestamp")), o.hls = visitUrl + o.documentid + "_" + o.pageid + ".png", o.hls.indexOf("?") > 0 ? o.hls = o.hls + "&sessionid=" + SESSIONID : o.hls = o.hls + "?sessionid=" + SESSIONID, "2" == o.type) { for (var d = r.getElementsByTagName("p"), c = new Array, u = 0; u < d.length; u++) { var m = analysis.getNodeValue(d[u]); c.push(m) } o.p = c } else if ("4" == o.type) { var d = r.getElementsByTagName("p"), g = r.getElementsByTagName("ep"), p = r.childNodes[5].nodeValue; d.length > 0 && (o.p = analysis.getNodeValue(d[0])), g.length > 0 && (o.ep = analysis.getNodeValue(g[0])), o.value = p } else { var d = r.getElementsByTagName("p"), g = r.getElementsByTagName("ep"); d.length > 0 && (o.p = analysis.getNodeValue(d[0])), g.length > 0 && (o.ep = analysis.getNodeValue(g[0])) } a.push(o) } a = analysis.sortPpt(a); var _ = a.length; if (t.annoArray = new Array, _ > 0) { for (var y = new Array, v = "", h = 0, l = 0; l < _; l++) { var f = a[l]; "" == v && (v = f.documentid + "_" + f.pageid, y[h] = new Array), v == f.documentid + "_" + f.pageid ? y[h].push(f) : (h += 1, y[h] = new Array, v = f.documentid + "_" + f.pageid, y[h].push(f)) } if (y.length > 0) { var A = y[y.length - 1], b = {}; b.annoArray = A; var T = A.length; T > 0 && (b.taskId = A[0].documentid + "_" + A[0].pageid + "_" + A[0].id + "_" + A[0].starttimestamp + "_" + T, app.globalData.currentTime > 5 ? (b.starttimestamp = A[0].starttimestamp, b.stoptimestamp = "") : (b.starttimestamp = inittimestamp, b.stoptimestamp = inittimestamp), t.annoArray.push(b)) } } return t }, analysisQaList: function (e) { logger.log("[analysisQaList] The content is:" + e); var t = analysis.parseXml(e), a = t.documentElement, i = {}; i.list = new Array; for (var n = a.getElementsByTagName("qa"), s = 0; s < n.length; s++) { var l = n[s], o = {}; o.id = analysis.getXmlNodeAttr(l, "id"), o.question = analysis.getXmlNodeAttr(l, "question"), o.submitor = analysis.getXmlNodeAttr(l, "questionowner"); "true" == analysis.getXmlNodeAttr(l, "removed") && (o.remove = !0), o.qaownerId = analysis.getXmlNodeAttr(l, "questionownerid"), o.answer = analysis.getXmlNodeAttr(l, "answer"), o.answerBy = analysis.getXmlNodeAttr(l, "answerowner"), o.submitTime = analysis.getXmlNodeAttr(l, "questiontimestamp"), o.answerTime = analysis.getXmlNodeAttr(l, "qaanswertimestamp"), i.list.push(o) } return i }, sortQaList: function (e) { for (var t = 0; t < e.length - 1; t++)for (var a = 0; a < e.length - 1 - t; a++)if (e[a].submitTime - e[a + 1].submitTime > 0) { var i = e[a]; e[a] = e[a + 1], e[a + 1] = i } return e }, analysisQaType: function (e) { var t = analysis.parseXml(e), a = t.documentElement; return analysis.getXmlNodeAttr(a, "name") }, analysisQa: function (e) { logger.log("[analysisQa] The content is:" + e); var t = {}, a = analysis.parseXml(e), i = a.documentElement; if ("qahistroy" == analysis.getXmlNodeAttr(i, "name")) return analysis.analysisQaList(e); for (var n = new Array, s = i.getElementsByTagName("qa"), l = new Array, o = 0; o < s.length; o++) { var r = s[o], c = {}; if (c.publishtimestamp = analysis.dealStartTime(analysis.getXmlNodeAttr(r, "timestamp")), c.id = analysis.getXmlNodeAttr(r, "id"), c.cmd = analysis.getXmlNodeAttr(r, "cmd"), !tool.checkObjectIsNull(c.cmd) && c.cmd.length > 0) { if ("cancelHighlight" == c.cmd) { c.questionid = c.id, l.push(c); continue } var d = r.getElementsByTagName("question")[0]; if (tool.checkObjectIsNull(d)) continue; c.questionid = c.id, c.questionuid = analysis.getXmlNodeAttr(d, "uid"), c.questionowner = analysis.getXmlNodeAttr(d, "name"), c.questionownerid = analysis.getXmlNodeAttr(d, "questionownerid"), c.questiontimestamp = analysis.getXmlNodeAttr(d, "time"), c.question = ""; for (var u = d.childNodes.length, m = 0; m < u; m++)c.question += tool.trim(d.childNodes[m].nodeValue); var g = r.getElementsByTagName("answer"); if (!tool.checkObjectIsNull(g)) { c.answerList = new Array; for (var p = 0; p < g.length; p++) { var _ = g[p], y = {}; if (!tool.checkObjectIsNull(_)) { y.answerid = analysis.getXmlNodeAttr(_, "uid"), y.answerowner = analysis.getXmlNodeAttr(_, "name"), y.answertimestamp = analysis.getXmlNodeAttr(_, "time"), y.answer = "", u = _.childNodes.length; for (var m = 0; m < u; m++)y.answer += tool.trim(_.childNodes[m].nodeValue) } c.answerList.push(y) } } l.push(c) } else { var d = r.getElementsByTagName("question")[0]; if (tool.checkObjectIsNull(d)) continue; var v = analysis.getXmlNodeAttr(d, "removed"); c.removed = "true" == v, c.id = analysis.getXmlNodeAttr(d, "id"), c.submitor = analysis.getXmlNodeAttr(d, "user"), c.qaownerId = analysis.getXmlNodeAttr(d, "questionownerid"), c.submitTime = analysis.getXmlNodeAttr(d, "timestamp"), c.question = ""; for (var u = d.childNodes.length, m = 0; m < u; m++)c.question += tool.trim(d.childNodes[m].nodeValue); var _ = r.getElementsByTagName("answer")[0]; if (!tool.checkObjectIsNull(_)) { c.answerBy = analysis.getXmlNodeAttr(_, "user"), c.answerTime = analysis.getXmlNodeAttr(_, "timestamp"), c.answer = "", u = _.childNodes.length; for (var m = 0; m < u; m++)c.answer += tool.trim(_.childNodes[m].nodeValue) } n.push(c) } } return n = analysis.sortQaArray(n), t.qaArray = n, t.pushQaList = l, t }, sortQaArray: function (e) { for (var t = 0; t < e.length - 1; t++)for (var a = 0; a < e.length - 1 - t; a++)if (e[a].publishtimestamp - e[a + 1].publishtimestamp > 0) { var i = e[a]; e[a] = e[a + 1], e[a + 1] = i } return e }, dealStartTime: function (e) { return app.globalData.currentTime > 5 ? e : inittimestamp }, analysisVote: function (e) { var t = {}; console.log("[Vote Ver]The content is:" + e); var a = analysis.parseXml(e), i = a.documentElement; Gensee_VER = analysis.getXmlNodeAttr(i, "ver"); for (var n, s, l = new Array, o = new Array, r = i.getElementsByTagName("command"), c = 0; c < r.length; c++) { var d = r[c], u = {}; n = "publish_card" == analysis.getXmlNodeAttr(d, "type"), s = "publish_cardresult" == analysis.getXmlNodeAttr(d, "type"), u.id = analysis.getXmlNodeAttr(d, "id"), s || (u.skip = analysis.getXmlNodeAttr(d, "skip")), n && (u.skip = "false"), n || s || (u.ver = analysis.getXmlNodeAttr(d, "version"), u.timestamp = analysis.dealStartTime(analysis.getXmlNodeAttr(d, "timestamp"))); var m = analysis.getXmlNodeAttr(d, "total"), g = "" != m && m.length > 0; g && (u.total = m); for (var p = d.childNodes, _ = 0; _ < p.length; _++) { var y = p[_]; if ("subject" == y.nodeName) { u.subject = analysis.getNodeValue(y); break } } var v = d.getElementsByTagName("question"); u.questions = new Array; for (var _ = 0; _ < v.length; _++) { var h = v[_], f = {}; f.id = analysis.getXmlNodeAttr(h, "id"), f.type = analysis.getXmlNodeAttr(h, "type"); var A = h.childNodes; if (g || s ? f.total = analysis.getXmlNodeAttr(h, "total") : n || s || (f.answer = analysis.getXmlNodeAttr(h, "answer")), !n && !s) for (var b = 0; b < A.length; b++) { var y = A[b]; if ("subject" == y.nodeName) { f.subject = analysis.getNodeValue(y); break } } if ("text" != f.type && f.type.length > 0) { n || s || (f.score = analysis.getXmlNodeAttr(h, "score")); var T = h.getElementsByTagName("item"); f.items = new Array; for (var N = 0; N < T.length; N++) { var S = T[N], U = {}; U.id = analysis.getXmlNodeAttr(S, "id"), U.option = analysis.getNodeValue(S), g ? U.total = analysis.getXmlNodeAttr(S, "total") : n ? U.selected = !1 : s ? (U.correct = analysis.getXmlNodeAttr(S, "correct"), U.total = analysis.getXmlNodeAttr(S, "total")) : (U.correct = analysis.getXmlNodeAttr(S, "correct"), U.selected = !1), f.items.push(U) } } "text" == f.type && (f.text = ""), u.questions.push(f) } g || s ? o.push(u) : l.push(u) } return (n || s) && (t.type = "card"), t.contentArray = l, t.resultArray = o, t }, analysisSurvey: function (e) { var t = {}; logger.log("[survey]The content is:" + e); for (var t = {}, a = analysis.parseXml(e), i = a.documentElement, n = new Array, s = i.getElementsByTagName("command"), l = 0; l < s.length; l++) { var o = s[l], r = {}; r.rootType = "survey", r.id = analysis.getXmlNodeAttr(o, "id"), r.type = analysis.getXmlNodeAttr(o, "type"), r.skip = analysis.getXmlNodeAttr(o, "skip"), r.timestamp = analysis.getXmlNodeAttr(o, "timestamp"); for (var c = o.childNodes, d = 0; d < c.length; d++) { var u = c[d]; if ("subject" == u.nodeName) { r.subject = analysis.getNodeValue(u); break } } var m = o.getElementsByTagName("question"); r.question = new Array; for (var d = 0; d < m.length; d++) { var g = m[d], p = {}; p.id = analysis.getXmlNodeAttr(g, "id"), p.type = analysis.getXmlNodeAttr(g, "type"), p.answer = analysis.getXmlNodeAttr(g, "answer"); for (var _ = g.childNodes, y = 0; y < _.length; y++) { var u = _[y]; if ("subject" == u.nodeName) { p.subject = analysis.getNodeValue(u); break } } r.question.push(p) } n.push(r) } return t.contentArray = n, t }, getXmlNodeAttr: function (e, t) { return e && e.attributes ? null != e.attributes[t] ? e.attributes[t].value : null != e.attributes.getNamedItem(t) ? e.attributes.getNamedItem(t).value : "" : "" }, lastAddress: function (e) { e = e.replace(/(^\s*)|(\s*$)/g, ""); var t = e.lastIndexOf("/"); return e.lastIndexOf("/") > 0 ? e.substring(0, t + 1) : e }, fillUrl: function (e, t) { return e = e.replace(/(^\s*)|(\s*$)/g, ""), 0 == e.indexOf("http://") || 0 == e.indexOf("https://") ? e : analysis.lastAddress(t) + e }, getNodeValue: function (e) { return e.textContent.replace(/(^\s*)|(\s*$)/g, "") }, analysisRole: function (e) { var t = ""; return "" != e && (e -= 0, e % 2 == 1 && (t += "1,", e -= 1), e % 4 == 2 && (t += "2,", e -= 2), e % 8 == 4 && (t += "4,", e -= 4), e % 16 == 8 && (t += "8,", e -= 8), e - 16 == 0 && (t += "16,"), t.length > 0 && (t = t.substring(0, t.length - 1))), t }, analysisVideoParam: function (e) { for (var t = new Array, a = analysis.parseXml(e), i = a.documentElement, n = i.getElementsByTagName("videoparam"), s = 0; s < n.length; s++) { var l = {}; l.width = analysis.getXmlNodeAttr(n[s], "width"), l.height = analysis.getXmlNodeAttr(n[s], "height"), l.isas = analysis.getXmlNodeAttr(n[s], "isas"), t.push(l) } return t }, analysisUsernum: function (e) { logger.log("[analysisUsernum] The content is:" + e); for (var t = analysis.parseXml(e), a = new Array, i = t.documentElement, n = i.getElementsByTagName("usernum"), s = 0; s < n.length; s++) { var l = {}; l.timestamp = analysis.getXmlNodeAttr(n[s], "timestamp"), l.num = analysis.getXmlNodeAttr(n[s], "num"), a.push(l) } return a }, parseXml: function (e) { var t; return t = (new Parser).parseFromString(e), e = t }, analysisEms: function (e) { logger.log("[ems]" + e); var t = {}, a = analysis.parseXml(e), i = a.documentElement, n = new Array, s = new Array, l = i.getElementsByTagName("ems"); (tool.checkObjectIsNull(l) || 0 == l.length) && (l = new Array, l.push(i)); for (var o = 0; o < l.length; o++) { t = {}; var r = l[o], c = analysis.getXmlNodeAttr(r, "type"), d = analysis.getXmlNodeAttr(r, "param"); if (logger.log("[ems]" + r), "" != c && void 0 != c && null != c && (t.type = c), "publicMsg" == c) t.content = analysis.getNodeValue(r); else if ("chat" == c) { var u = analysis.getXmlNodeAttr(r, "groupid"), m = analysis.getXmlNodeAttr(r, "group"); t.senderRole = analysis.analysisRole(analysis.getXmlNodeAttr(r, "senderRole")); var g = analysis.getXmlNodeAttr(r, "senderId"); if (g == c_userid) continue; "1" == m ? t.type = "chat_all" : "" != u && (t.type = "2" == m ? "chat_third" : "chat_all"), t.sender = analysis.getXmlNodeAttr(r, "sender"), t.senderId = analysis.getXmlNodeAttr(r, "senderid"), t.senderUid = analysis.getXmlNodeAttr(r, "senderId"), t.id = analysis.getXmlNodeAttr(r, "id"); var p = r.childNodes; if (logger.log("[emsChildNodes.length]" + p.length), null == p || p.length <= 1) t.content = analysis.getNodeValue(r); else { t.content = "", t.richtext = ""; for (var _ = 0; _ < p.length; _++) { var y = p[_]; logger.log("[emsChildeNode.nodeName]" + y.nodeName), "richtext" == y.nodeName ? (t.richtext = t.richtext + analysis.getNodeValue(y), logger.log("[analysisEmsObj.richtext]" + t.richtext)) : t.content = t.content + analysis.getNodeValue(y) } } if (gstrue) { s.push(t); continue } } else if ("close" == c) t.reason = analysis.getXmlNodeAttr(r, "reason"); else if ("rollCall" == c || "rollCall2" == c) t.timeout = analysis.getXmlNodeAttr(r, "timeout"), t.senderid = analysis.getXmlNodeAttr(r, "senderid"); else if ("muteChat" == c) t.on = analysis.getXmlNodeAttr(r, "on"), t.senderid = analysis.getXmlNodeAttr(r, "senderid"); else if ("onRosterInfolist" == c) { logger.log("[onRosterInfolist anaysisly]"), t.type = analysis.getXmlNodeAttr(r, "type"), t.senderid = analysis.getXmlNodeAttr(r, "senderid"); var v = r.getElementsByTagName("RosterInfoDisable"); t.disabled = !1, logger.log("[rosterInfoDisable]" + v.length), null != v && v.length > 0 && (t.disabled = !0); for (var h = r.getElementsByTagName("RosterInfoHistroy"), f = new Array, _ = 0; _ < h.length; _++)for (var A = h[_], b = A.getElementsByTagName("roster"), T = 0; T < b.length; T++) { var N = {}, S = b[T]; N.id = analysis.getXmlNodeAttr(S, "id"), N.name = analysis.getXmlNodeAttr(S, "rostername"), N.chatid = analysis.getXmlNodeAttr(S, "chatuserid"); var U = analysis.getXmlNodeAttr(S, "userRole"); if (N.role = analysis.analysisRole(U), f.push(N), media.gstrue) { var I = analysis.getXmlNodeAttr(S, "userappinfo"); void 0 != I && (I = tool.decodeHex(I), userdatas[N.id] = I) } } t.list = f; for (var O = r.getElementsByTagName("RosterInfoNotify"), k = new Array, x = new Array, w = new Array, _ = 0; _ < O.length; _++)for (var L = O[_], b = L.getElementsByTagName("roster"), T = 0; T < b.length; T++) { var N = {}, S = b[T]; N.id = analysis.getXmlNodeAttr(S, "id"), N.name = analysis.getXmlNodeAttr(S, "rostername"), N.chatid = analysis.getXmlNodeAttr(S, "chatuserid"); var U = analysis.getXmlNodeAttr(S, "userRole"); N.role = analysis.analysisRole(U); var E = analysis.getXmlNodeAttr(S, "notifytype"); if (media.gstrue) { var I = analysis.getXmlNodeAttr(S, "userappinfo"); void 0 != I && (I = tool.decodeHex(I), userdatas[N.id] = I) } "0" == E ? k.push(N) : "1" == E ? x.push(N) : "2" == E && w.push(N) } t.leaveList = x, t.joinList = k, t.updateList = w } else if ("qaenable" == c) t.enable = analysis.getXmlNodeAttr(r, "enable"); else if ("chatenable" == c) t.enable = analysis.getXmlNodeAttr(r, "enable"); else if ("user.rostrum" == c || "user.asker" == c) t.globaluserid = analysis.getXmlNodeAttr(r, "globaluserid"), t.senderid = analysis.getXmlNodeAttr(r, "senderid"), "0" != t.senderid && t.senderid - 0 != 0 || ("user.rostrum" == c && (Gensee_Host_User_Id = null), "user.asker" == c && (Gensee_Asker_User_Id = null)); else if ("class.mode" == c) t.mode = analysis.getXmlNodeAttr(r, "mode"), t.senderid = analysis.getXmlNodeAttr(r, "senderid"); else if ("user.app.info" == c) { for (var D = r.getElementsByTagName("user"), C = new Array, o = 0; o < D.length; o++) { var B = D[o], j = analysis.getXmlNodeAttr(B, "globaluserid"), I = analysis.getXmlNodeAttr(B, "userappinfo"); void 0 != I && (I = tool.decodeHex(I), userdatas[j] = I); for (var R = !1, _ = 0; _ < C.length; _++)C[_] == j && (R = !0); R || C.push(j) } var P = ""; C.sort(function (e, t) { return e - t }); for (var o = 0; o < C.length; o++)P += "_" + C[o]; for (var o = 0; o < chatList.length; o++)if (chatList[o].keys == P) { for (var _ = 0; _ <= o; _++)for (var G = chatList[_].chats, M = new Array, T = 0; T < G.length; T++) { var F = G[T]; F.inittimestamp = inittimestamp, void 0 != userdatas[F.senderUid] && (F.userdata = userdatas[F.senderUid]), M.push(F) } chatList.splice(0, o + 1), media.emsDealFunction(M); break } } else if ("RoleStatus" == c) t.hostid = analysis.getXmlNodeAttr(r, "hostglobaluserid"), t.hostname = analysis.getXmlNodeAttr(r, "hostusername"), t.presid = analysis.getXmlNodeAttr(r, "preglobaluserid"), t.presname = analysis.getXmlNodeAttr(r, "preusername"); else if ("hongbao.key" == c) { var X = r.getElementsByTagName("broadmessage")[0], V = analysis.getXmlNodeAttr(X, "type"); if ("hongbao" == V) { var q = X.getElementsByTagName("hongbao")[0], J = analysis.getXmlNodeAttr(q, "type"), W = {}; "create" == J ? (t.type = "hbcreate", W.type = analysis.getXmlNodeAttr(q, "hongbaotype"), W.hbid = analysis.getXmlNodeAttr(q, "id"), W.username = analysis.getNodeValue(q.getElementsByTagName("username")[0]), W.comment = analysis.getNodeValue(q.getElementsByTagName("comment")[0])) : "grab" == J && (t.type = "hbgrabmsg", analysis.getXmlNodeAttr(q, "hongbaotype") >= 2 ? W.type = 1 : W.type = 0, W.hbid = analysis.getXmlNodeAttr(q, "id"), W.userid = analysis.getXmlNodeAttr(q, "userid"), W.amount = analysis.getXmlNodeAttr(q, "amount"), W.username = analysis.getNodeValue(q.getElementsByTagName("username")[0])), t.content = W } else if ("tip" == V) { var K = X.getElementsByTagName("tip")[0]; t.type = "tip"; var Q = {}; Q.id = analysis.getXmlNodeAttr(K, "id"), Q.userid = analysis.getXmlNodeAttr(K, "userid"), Q.amount = analysis.getXmlNodeAttr(K, "amount"), Q.username = analysis.getNodeValue(K.getElementsByTagName("username")[0]), t.content = Q } } else "USER_LOG_GET" == c && sendMessage.uploadLogFile(function () { }, d); tool.isEmptyObject(t) || n.push(t) } if (media.gstrue && s.length > 0) { var H = !0, P = "", C = new Array, F = {}; F.timestamp = (new Date).getTime(); for (var o = 0; o < s.length; o++)if (void 0 == userdatas[s[o].senderUid]) { H = !1; for (var R = !1, _ = 0; _ < C.length; _++)C[_] == s[o].senderUid && (R = !0); R || C.push(s[o].senderUid) } else s[o].userdata = userdatas[s[o].senderUid]; C.sort(function (e, t) { return e - t }); for (var o = 0; o < C.length; o++)P += "_" + C[o]; F.hasInfo = H, F.keys = P, F.chats = s, chatList.push(F), C.length > 0 && sendUserData(C) } var Y = i.getElementsByTagName("chatcensor"); if (!tool.checkObjectIsNull(Y) && Y.length > 0) { var z = {}; z.censorList = new Array, z.type = "delchat"; for (var o = 0; o < Y.length; o++) { var $ = {}, r = Y[o], c = analysis.getXmlNodeAttr(r, "type"); logger.log("[chatcensor]" + r), "msg" == c ? ($.type = "chat", $.id = analysis.getXmlNodeAttr(r, "id"), z.censorList.push($)) : "user" == c && ($.type = "user", $.id = analysis.getXmlNodeAttr(r, "id"), z.censorList.push($)) } if (z.censorList.length > 0 && (n.push(z), media.gstrue)) for (var _ = 0; _ < z.censorList.length; _++) { var Z = z.censorList[_]; if ("msg" == Z.type) { for (var T = 0; T < chatList.length; T++)for (var G = chatList[T], ee = 0; ee < G.length; ee++)if (G[ee].id == Z.id) { G.splice(ee, 1), 0 == G.length && chatList.splice(T, 1); break } } else if ("user" == Z.type) for (var T = 0; T < chatList.length; T++)for (var G = chatList[T], ee = 0; ee < G.length; ee++)G[ee].senderUid == Z.id && (G.splice(ee, 1), ee-- , 0 == G.length && (chatList.splice(T, 1), T--)) } } return n }, analysisHisAnno: function (e) { logger.log("[analysisAnno] The content is:" + e); for (var t = new Array, a = e.documentElement, i = a.getElementsByTagName("command"), n = 0; n < i.length; n++) { var s = {}, l = i[n], o = new Array; if (s.id = analysis.getXmlNodeAttr(l, "id"), s.type = analysis.getXmlNodeAttr(l, "type"), s.documentid = analysis.getXmlNodeAttr(l, "documentid"), s.pageid = analysis.getXmlNodeAttr(l, "pageid"), s.color = analysis.getXmlNodeAttr(l, "color"), s.linesize = analysis.getXmlNodeAttr(l, "linesize"), s.fontsize = analysis.getXmlNodeAttr(l, "fontsize"), s.style = analysis.getXmlNodeAttr(l, "style"), s.removed = analysis.getXmlNodeAttr(l, "removed"), s.starttimestamp = 1e3 * Number(analysis.getXmlNodeAttr(l, "timestamp")), s.stoptimestamp = Number(s.starttimestamp) + 1, s.hls = visitUrl + s.documentid + "_" + s.pageid + ".png?sessionid=" + SESSIONID, "2" == s.type) { for (var r = l.getElementsByTagName("p"), o = new Array, c = 0; c < r.length; c++) { var d = analysis.getNodeValue(r[c]); o.push(d) } s.p = o } else if ("4" == s.type) { var r = l.getElementsByTagName("p"), u = l.getElementsByTagName("ep"), m = analysis.getNodeValue(l); r.length > 0 && (s.p = analysis.getNodeValue(r[0]), m = m.replace(s.p, "")), u.length > 0 && (s.ep = analysis.getNodeValue(u[0]), m = m.replace(s.ep, "")), s.value = m } else { var r = l.getElementsByTagName("p"), u = l.getElementsByTagName("ep"); r.length > 0 && (s.p = analysis.getNodeValue(r[0])), u.length > 0 && (s.ep = analysis.getNodeValue(u[0])) } t.push(s) } if (t = analysis.sortPpt(t), null != Gensee_Now_Doc_Url_SDK) { if (t.length > 0) for (var n = 0; n < t.length; n++) { var g = t[n]; Gensee_Now_Doc_Url_SDK != g.hls && (t.splice(n, 1), n--) } taskDeal.annoFirstDealFunction(t), hisAnnoArray = new Array } else hisAnnoArray = t }, analysisPpt: function (e) { logger.log("[analysisPpt] The content is:" + e); for (var t = {}, a = analysis.parseXml(e), i = a.documentElement, n = new Array, s = i.getElementsByTagName("page"), l = 0; l < s.length; l++) { var o = {}, r = s[l]; o.hls = analysis.fillUrl(analysis.getXmlNodeAttr(r, "hls"), visitUrl), o.hls.indexOf("?") > 0 ? o.hls = o.hls + "&sessionid=" + SESSIONID : o.hls = o.hls + "?sessionid=" + SESSIONID, logger.log("[analysisPpt]the hls :" + o.hls), o.height = analysis.getXmlNodeAttr(r, "height"), o.width = analysis.getXmlNodeAttr(r, "width"), o.hlsid = analysis.getXmlNodeAttr(r, "hls").replace(".png", ""), o.taskId = o.hlsid + "_" + analysis.getXmlNodeAttr(r, "starttimestamp"), logger.log("media.currentTime:" + app.globalData.currentTime), app.globalData.currentTime > 5 ? (o.starttimestamp = analysis.getXmlNodeAttr(r, "starttimestamp"), o.stoptimestamp = analysis.getXmlNodeAttr(r, "stoptimestamp")) : (o.starttimestamp = inittimestamp, o.stoptimestamp = inittimestamp), n.push(o) } n = analysis.sortPpt(n); var c = n.length; return t.pageArray = new Array, c > 0 && t.pageArray.push(n[c - 1]), t } }, xmloperation = { createXml: function (e, t) { t = tool.checkObjectIsNull(t) ? "" : 'encoding="' + t + '"'; var a = '<?xml version="1.0" ' + t + "?>"; return tool.checkObjectIsNull(e) || (a += xmloperation.createNode(e)), a }, createNode: function (e, t) { if (tool.checkObjectIsNull(t) && (t = !0), !tool.checkObjectIsNull(e) && !tool.checkObjectIsNull(e.nodeName)) { var a = "<" + e.nodeName; if (!tool.checkObjectIsNull(e.attrArray)) for (var i = 0; i < e.attrArray.length; i++) { var n = e.attrArray[i]; a += " " + n.name + '="' + n.value + '"' } var a = a + ">"; tool.checkObjectIsNull(e.value) || (t ? a = a + "<![CDATA[" + e.value + "]]>" : a += e.value); var a = a + "</" + e.nodeName + ">"; return a } }, createNodeText: function (e, t) { if (tool.checkObjectIsNull(t) && (t = !0), !tool.checkObjectIsNull(e) && !tool.checkObjectIsNull(e.nodeName)) { var a = "<" + e.nodeName; if (!tool.checkObjectIsNull(e.attrArray)) for (var i = 0; i < e.attrArray.length; i++) { var n = e.attrArray[i]; a += " " + n.name + '="' + n.value + '"' } var a = a + ">"; if (tool.checkObjectIsNull(e.value) || (t ? a = a + "<![CDATA[" + e.value + "]]>" : a += e.value), !tool.checkObjectIsNull(e.textArray) && e.textArray.length > 0) for (var i = 0; i < e.textArray.length; i++) { var s = e.textArray[i]; tool.checkObjectIsNull(s.nodeName) || (a = a + "<" + s.nodeName + "><![CDATA[", tool.checkObjectIsNull(s.value) || (a += s.value), a = a + "]]></" + s.nodeName + ">") } var a = a + "</" + e.nodeName + ">"; return a } }, addNode: function (e, t, a, i) { var n = 0; if (tool.checkObjectIsNull(a)) { var s = e; if (-1 == (n = s.lastIndexOf("</"))) return } else { tool.checkObjectIsNull(i) && (i = 1); for (var s = e, l = 0, o = 0; o < i; o++) { if (-1 == (l = s.indexOf(a, l))) return; var r = s.lastIndexOf("<", l), c = s.lastIndexOf("</", l); r <= c && o-- , l += a.length } if (0 == l) return; s = s.substring(l + a.length), n += l + a.length, l = 0; for (var d = 0, u = !0; u;) { if (-1 == (l = s.indexOf(a))) return; var r = s.lastIndexOf("<", l), c = s.lastIndexOf("</", l); r <= c ? d-- : d++ , d < 0 && (n += c, u = !1) } } return e.substring(0, n) + t + e.substring(n) }, getXmlNodeAttr: function (e, t) { return e && e.attributes ? null != e.attributes[t] ? e.attributes[t].value : null != e.attributes.getNamedItem(t) ? e.attributes.getNamedItem(t).value : "" : "" }, getNodeValue: function (e) { return tool.trim(e.textContent) } }; module.exports = media;